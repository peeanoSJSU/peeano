{"ast":null,"code":"export default function sketchwrapper(p) {\n  let canvas;\n  let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n\n  let currentUser;\n  let keyArray = [];\n  let recording = {};\n  let startTime = 0;\n  let soundFiles = [\"https://nguyenshana.github.io/piano-sounds/c1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/e1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/b1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"];\n  let defaultKeyMapping = {\n    \"c1\": [\"white\", \"a\", soundFiles[0], 20],\n    \"c1#\": [\"black\", \"s\", soundFiles[1], 40],\n    \"d1\": [\"white\", \"d\", soundFiles[2], 50],\n    \"d1#\": [\"black\", \"e\", soundFiles[3], 70],\n    \"e1\": [\"white\", \"f\", soundFiles[4], 80],\n    \"f1\": [\"white\", \"g\", soundFiles[5], 110],\n    \"f1#\": [\"black\", \"h\", soundFiles[6], 130],\n    \"g1\": [\"white\", \"j\", soundFiles[7], 140],\n    \"g1#\": [\"black\", \"u\", soundFiles[8], 160],\n    \"a1\": [\"white\", \"k\", soundFiles[9], 170],\n    \"a1#\": [\"black\", \"i\", soundFiles[10], 190],\n    \"c2\": [\"white\", \"l\", soundFiles[11], 200]\n  }; // end main variables\n\n  p5.setup = () => {\n    p5.noLoop();\n    p5.strokeWeight(4);\n\n    if (state === 0) {\n      let addKeyIndex = 0;\n\n      for (let note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      currentUser = new User(keyArray);\n    }\n  }; // not sure if this can a ctually be called from React\n\n\n  p5.setState = stateNum => {\n    state = stateNum;\n  }; // currently drawing keys in order from left to right\n\n\n  p5.draw = () => {\n    p5.fill(0);\n    canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n\n    if (state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n        // draws keys\n        for (let i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        p5.drawMapButton();\n        p5.drawRecordButton();\n      } else if (state === 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for (let j = 0; j < keyArray.length; j++) {\n          keyArray[j].drawKey();\n        }\n\n        p5.drawMapButton();\n        p5.drawRecordButton();\n      } else if (state === 2) // changing keystrokes\n      {\n        // draws keys\n        for (let k = 0; k < keyArray.length; k++) {\n          keyArray[k].drawKey();\n        }\n\n        p5.drawPlayButton();\n      } else if (state === 3) // recording\n      {\n        // draws keys\n        for (let l = 0; l < keyArray.length; l++) {\n          keyArray[l].drawKey();\n        }\n\n        p5.drawEndRecordingButton();\n      }\n  }; // end draw()\n\n  /* BUTTON SECTION */\n\n\n  let buttonX = 300;\n  let buttonY = 100;\n  let buttonWidth = 180;\n  let buttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p5.drawMapButton = () => {\n    p5.fill(0);\n    p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p5.fill(255);\n    p5.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p5.drawPlayButton = () => {\n    p5.fill(255);\n    p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p5.fill(0);\n    p5.text('Click here to play piano', buttonX + 25, buttonY + 20);\n  };\n  /* RECORDING BUTTON SECTION */\n\n\n  let rbuttonX = 300;\n  let rbuttonY = 50;\n  let rbuttonWidth = 100;\n  let rbuttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p5.drawRecordButton = () => {\n    p5.fill(0);\n    p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p5.fill(255);\n    p5.text('Record', rbuttonX + 30, rbuttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p5.drawEndRecordingButton = () => {\n    p5.fill(255);\n    p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p5.fill(0);\n    p5.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n  };\n  /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n\n  let currentSelectedKey = null;\n  let textX = 30;\n  let textY = 200;\n  /**\n  Function is called when a keyboard key is pressed\n  */\n\n  p5.keyPressed = () => {\n    p5.redraw();\n    p5.fill(0);\n\n    if (state === 0 || state === 1 || state === 3) {\n      p5.text(`Key pressed: ${p5.key}`, textX, textY); // \n      // loop through ALL of list to find corresponding key(s) & then play the audio\n      //\n\n      for (let m = 0; m < keyArray.length; m++) {\n        if (keyArray[m].getKeyboardKey() === p5.key) {\n          keyArray[m].drawPressedKey();\n        }\n      }\n    } else if (state === 2) {\n      // change the keymapping and notify user\n      // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n      if (currentSelectedKey != null) {\n        let sameKeyIndex = 0;\n\n        while (sameKeyIndex < keyArray.length) {\n          if (keyArray[sameKeyIndex] === currentSelectedKey) {\n            break;\n          }\n\n          sameKeyIndex += 1;\n        }\n\n        keyArray[sameKeyIndex].changeKeyboardKey();\n        currentUser.updateKeyMappings(keyArray);\n        currentSelectedKey = null;\n      }\n    }\n\n    if (state === 3) {\n      // recording\n      let selectedKey;\n\n      for (let n = 0; n < keyArray.length; n++) {\n        if (keyArray[n].getKeyboardKey() === p5.key) {\n          selectedKey = keyArray[n];\n          recording[p5.millis() - startTime] = selectedKey;\n        }\n      }\n    }\n  }; // end keyPressed()\n\n\n  p5.keyReleased = () => {\n    p5.redraw();\n  };\n  /**\n  Function is called when mouse left button is pressed\n  */\n\n\n  p5.mouseClicked = () => {\n    // state button is pressed\n    if (p5.mouseX > buttonX && p5.mouseX < buttonX + buttonWidth && p5.mouseY > buttonY && p5.mouseY < buttonY + buttonHeight) {\n      if (state === 2) {\n        state = 1;\n        p5.redraw();\n      } else if (state === 0 || state === 1) {\n        state = 2;\n        p5.redraw();\n      }\n    } else if (state === 2) {\n      // see if user if selecting a key to remap\n      currentSelectedKey = p5.selectKeyToRemap();\n    }\n\n    if (p5.mouseX > rbuttonX && p5.mouseX < rbuttonX + rbuttonWidth && p5.mouseY > rbuttonY && p5.mouseY < rbuttonY + rbuttonHeight) {\n      if (state === 0 || state === 1) {\n        // starting recording\n        state = 3;\n        recording = {};\n        startTime = p5.millis();\n      } else if (state === 3) {\n        // ending recording\n        state = 1;\n        currentUser.addRecording();\n      }\n\n      p5.redraw();\n    }\n  }; // end mouseClicked()\n\n  /**\n  Finds which piano key is clicked on and returns it\n  */\n\n\n  p5.selectKeyToRemap = () => {\n    p5.redraw();\n    let whiteKeys = [];\n    let selectedBlackKey = false;\n    let selectedKey = null; // iterate through black keys first because they're visually \"on top\"\n\n    let findKeyIndex = 0;\n\n    while (findKeyIndex < keyArray.length) {\n      if (keyArray[findKeyIndex].constructor.name === \"BlackKey\") {\n        if (keyArray[findKeyIndex].contains(p5.mouseX, p5.mouseY)) {\n          selectedKey = keyArray[findKeyIndex];\n          findKeyIndex = keyArray.length;\n          selectedBlackKey = true;\n        }\n      } else {\n        whiteKeys.push(keyArray[findKeyIndex]);\n      }\n\n      findKeyIndex += 1;\n    } // if black key wasn't selected, then iterate through white keys\n\n\n    if (!selectedBlackKey) {\n      findKeyIndex = 0;\n\n      while (findKeyIndex < whiteKeys.length) {\n        if (whiteKeys[findKeyIndex].contains(p5.mouseX, p5.mouseY)) {\n          selectedKey = whiteKeys[findKeyIndex];\n          findKeyIndex = whiteKeys.length;\n        }\n\n        findKeyIndex += 1;\n      }\n    }\n\n    p5.fill(0);\n\n    if (selectedKey == null) {\n      p5.text(\"Please press on a piano key! :)\", textX, textY);\n    } else {\n      p5.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n    }\n\n    return selectedKey;\n  }; // end of main functions\n\n  /**\n  Abstract class to hold Piano Key note name, sound file, and top-left Y position\n  (tbh not sure if abstract is the correct term, but don't initialize this)\n  */\n\n\n  class PianoKey {\n    constructor(note, keyboardKey, sound) {\n      this.note = note;\n      this.keyboardKey = keyboardKey;\n      this.sound = p5.loadSound(sound);\n      this.startY = 20;\n    }\n\n    play() {\n      this.sound.play();\n    }\n\n    contains(x, y) {\n      if (x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) {\n        return true;\n      }\n\n      return false;\n    }\n\n    changeKeyboardKey() {\n      this.keyboardKey = p5.key;\n      p5.redraw();\n      p5.text(`New key = ${p5.key} for ${this.note}`, textX, textY);\n    }\n\n    getNote() {\n      return this.note;\n    }\n\n    getKeyboardKey() {\n      return this.keyboardKey;\n    }\n\n  }\n  /**\n  White piano key class\n  */\n\n\n  class WhiteKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 30;\n      this.height = 140;\n      this.drawWhiteKey();\n    }\n\n    drawKey() {\n      this.drawWhiteKey();\n    } // 75 because that's the height of a black key\n\n\n    drawPressedKey() {\n      p5.strokeWeight(0);\n      p5.fill(200);\n      p5.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n      p5.strokeWeight(4);\n      p5.fill(0);\n      p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawWhiteKey() {\n      p5.noFill();\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(0);\n      p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end WhiteKey\n\n  /**\n  Black piano key class\n  */\n\n\n  class BlackKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 20;\n      this.height = 75;\n      this.drawBlackKey();\n    }\n\n    drawKey() {\n      this.drawBlackKey();\n    }\n\n    drawPressedKey() {\n      p5.fill(100);\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(255);\n      p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawBlackKey() {\n      p5.fill(0);\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(255);\n      p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end BlackKey\n\n  /**\n  Class to represent a user & their keyboard mappings\n  */\n\n\n  class User {\n    // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n    constructor(keys) {\n      this.allKeys = keys; // format for recordings [{},{}]\n      // recording = {timeInMillisec, PianoKey}\n\n      this.recordings = [];\n    }\n\n    updateKeyMappings(keys) {\n      this.allKeys = keys;\n    } // this resets the keyArray accessible throughout the entire file to the default mapping as well\n\n\n    revertToDefaultMapping() {\n      let addKeyIndex = 0;\n\n      for (let note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      this.allKeys = keyArray;\n    }\n\n    getKeyMappings() {\n      return this.allKeys;\n    }\n\n    addRecording() {\n      this.recordings.push(recording); // for(let time in recording) {\n      //  print(time, recording[time].getNote());\n      // }\n    }\n\n    getRecordings() {\n      return this.recordings;\n    }\n\n  } // end User\n\n}\n;","map":{"version":3,"sources":["/Users/shana/Desktop/DesktopItems/CMPE 133/peeano/peeano-frontend/src/sketches/sketchwrapper.js"],"names":["sketchwrapper","p","canvas","state","currentUser","keyArray","recording","startTime","soundFiles","defaultKeyMapping","p5","setup","noLoop","strokeWeight","addKeyIndex","note","WhiteKey","BlackKey","User","setState","stateNum","draw","fill","createCanvas","windowWidth","windowHeight","i","length","drawKey","drawMapButton","drawRecordButton","j","k","drawPlayButton","l","drawEndRecordingButton","buttonX","buttonY","buttonWidth","buttonHeight","rect","text","rbuttonX","rbuttonY","rbuttonWidth","rbuttonHeight","currentSelectedKey","textX","textY","keyPressed","redraw","key","m","getKeyboardKey","drawPressedKey","sameKeyIndex","changeKeyboardKey","updateKeyMappings","selectedKey","n","millis","keyReleased","mouseClicked","mouseX","mouseY","selectKeyToRemap","addRecording","whiteKeys","selectedBlackKey","findKeyIndex","constructor","name","contains","push","getNote","PianoKey","keyboardKey","sound","loadSound","startY","play","x","y","startX","width","height","drawWhiteKey","noFill","drawBlackKey","keys","allKeys","recordings","revertToDefaultMapping","getKeyMappings","getRecordings"],"mappings":"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","sourcesContent":["export default function sketchwrapper (p) {\n  let canvas;\n  let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n  let currentUser;\n  let keyArray = [];\n\n  let recording = {};\n  let startTime = 0;\n\n  let soundFiles = [\n    \"https://nguyenshana.github.io/piano-sounds/c1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/d1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/e1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/f1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/g1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/a1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/b1.m4a\",\n    \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"\n  ]\n\n  let defaultKeyMapping = {\n    \"c1\" : [\"white\", \"a\", soundFiles[0], 20],\n    \"c1#\" : [\"black\", \"s\", soundFiles[1], 40],\n    \"d1\" : [\"white\", \"d\", soundFiles[2], 50],\n    \"d1#\" : [\"black\", \"e\", soundFiles[3], 70],\n    \"e1\" : [\"white\", \"f\", soundFiles[4], 80],\n\n    \"f1\" : [\"white\", \"g\", soundFiles[5], 110],\n    \"f1#\" : [\"black\", \"h\", soundFiles[6], 130],\n    \"g1\" : [\"white\", \"j\", soundFiles[7], 140],\n    \"g1#\" : [\"black\", \"u\", soundFiles[8], 160],\n    \"a1\" : [\"white\", \"k\", soundFiles[9], 170],\n    \"a1#\" :[\"black\", \"i\", soundFiles[10], 190],\n    \"c2\" : [\"white\", \"l\", soundFiles[11], 200]\n  }\n\n  // end main variables\n\n\n\n  p5.setup = () => \n  {    \n\n    p5.noLoop();\n    p5.strokeWeight(4);\n\n    if(state === 0) {\n      let addKeyIndex = 0;\n      for(let note in defaultKeyMapping) \n      {\n        if(defaultKeyMapping[note][0] === \"white\")\n        {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n        else \n        {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n        addKeyIndex += 1;\n      }\n\n      currentUser = new User(keyArray);\n    }\n\n  }\n\n\n  // not sure if this can a ctually be called from React\n  p5.setState = (stateNum) =>\n  {\n    state = stateNum;\n  }\n\n\n  // currently drawing keys in order from left to right\n  p5.draw = () =>\n  {\n    p5.fill(0);\n    canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n    if(state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n    {\n\n      // draws keys\n      for(let i = 0; i < keyArray.length; i++) \n      {\n        keyArray[i].drawKey();\n      }\n      p5.drawMapButton();\n\n      p5.drawRecordButton();\n\n    } \n    else if (state === 1) // someone is logged in; basically same as 0\n    {\n      // draws keys\n      for(let j = 0; j < keyArray.length; j++) \n      {\n        keyArray[j].drawKey();\n      }\n      p5.drawMapButton();\n\n      p5.drawRecordButton();\n\n    }\n    else if (state === 2) // changing keystrokes\n    {\n      // draws keys\n      for(let k = 0; k < keyArray.length; k++) \n      {\n        keyArray[k].drawKey();\n      }\n      p5.drawPlayButton();\n\n    }\n    else if (state === 3) // recording\n    {\n      // draws keys\n      for(let l = 0; l < keyArray.length; l++) \n      {\n        keyArray[l].drawKey();\n      }\n\n      p5.drawEndRecordingButton();\n\n    }\n\n  } // end draw()\n\n\n\n  /* BUTTON SECTION */\n\n  let buttonX = 300;\n  let buttonY = 100;\n  let buttonWidth = 180;\n  let buttonHeight = 30;\n\n  /**\n  Draws button to display for user to change to map mode\n  */\n  p5.drawMapButton = () => {\n    p5.fill(0);\n    p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p5.fill(255);\n    p5.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n  }\n\n\n  /**\n  Draws button to display for user to change to regular mode\n  */\n  p5.drawPlayButton = () => {\n    p5.fill(255);\n    p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p5.fill(0);\n    p5.text('Click here to play piano', buttonX + 25, buttonY + 20);\n  }\n\n\n  /* RECORDING BUTTON SECTION */\n\n  let rbuttonX = 300;\n  let rbuttonY = 50;\n  let rbuttonWidth = 100;\n  let rbuttonHeight = 30;\n\n  /**\n  Draws button to display for user to change to map mode\n  */\n  p5.drawRecordButton = () => {\n    p5.fill(0);\n    p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p5.fill(255);\n    p5.text('Record', rbuttonX + 30, rbuttonY + 20);\n  }\n\n\n  /**\n  Draws button to display for user to change to regular mode\n  */\n  p5.drawEndRecordingButton = () => {\n    p5.fill(255);\n    p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p5.fill(0);\n    p5.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n  }\n\n\n\n  /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n  let currentSelectedKey = null;\n  let textX = 30;\n  let textY = 200;\n\n  /**\n  Function is called when a keyboard key is pressed\n  */\n  p5.keyPressed = () =>\n  {\n    p5.redraw();\n    p5.fill(0);\n    if(state === 0 || state === 1 || state === 3) {\n      p5.text(`Key pressed: ${p5.key}`, textX, textY);\n      // \n      // loop through ALL of list to find corresponding key(s) & then play the audio\n      //\n      for(let m = 0; m < keyArray.length; m++) {\n        if(keyArray[m].getKeyboardKey() === p5.key) {\n          keyArray[m].drawPressedKey();\n        }\n      }\n    }\n    else if (state === 2) { // change the keymapping and notify user\n      // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n\n      if(currentSelectedKey != null) \n      {\n        let sameKeyIndex = 0;\n        while(sameKeyIndex < keyArray.length) \n        {\n          if(keyArray[sameKeyIndex] === currentSelectedKey) \n          {\n            break;\n          }\n          sameKeyIndex += 1;\n        }\n        keyArray[sameKeyIndex].changeKeyboardKey();\n        currentUser.updateKeyMappings(keyArray);\n        currentSelectedKey = null;\n      }\n    }\n    if (state === 3) { // recording\n      let selectedKey;\n      for(let n = 0; n < keyArray.length; n++) {\n        if(keyArray[n].getKeyboardKey() === p5.key) {\n          selectedKey = keyArray[n];\n          recording[p5.millis() - startTime] = selectedKey;\n        }\n      }\n    }\n\n  } // end keyPressed()\n\n\n  p5.keyReleased = () => {\n    p5.redraw();\n  }\n\n\n  /**\n  Function is called when mouse left button is pressed\n  */\n  p5.mouseClicked = () =>\n  {\n    // state button is pressed\n    if(p5.mouseX > buttonX && p5.mouseX < buttonX + buttonWidth && p5.mouseY > buttonY && p5.mouseY < buttonY + buttonHeight) \n    {\n      if(state === 2) \n      {\n        state = 1;\n        p5.redraw();\n      }\n      else if (state === 0 || state === 1) \n      {\n        state = 2;\n        p5.redraw();\n      } \n    } \n    else if(state === 2) \n    { // see if user if selecting a key to remap\n      currentSelectedKey = p5.selectKeyToRemap();\n    }\n    if(p5.mouseX > rbuttonX && p5.mouseX < rbuttonX + rbuttonWidth && p5.mouseY > rbuttonY && p5.mouseY < rbuttonY + rbuttonHeight) \n    {\n      if(state === 0 || state === 1) \n      { // starting recording\n        state = 3;\n        recording = {};\n        startTime = p5.millis();\n      }\n      else if(state === 3) \n      { // ending recording\n        state = 1;\n        currentUser.addRecording();\n      }\n      p5.redraw();\n    }\n\n  } // end mouseClicked()\n\n\n  /**\n  Finds which piano key is clicked on and returns it\n  */\n  p5.selectKeyToRemap = () => {\n\n    p5.redraw();\n    let whiteKeys = [];\n    let selectedBlackKey = false;\n    let selectedKey = null;\n\n    // iterate through black keys first because they're visually \"on top\"\n    let findKeyIndex = 0;\n    while(findKeyIndex < keyArray.length) \n    {\n      if(keyArray[findKeyIndex].constructor.name === \"BlackKey\") \n      {\n        if(keyArray[findKeyIndex].contains(p5.mouseX, p5.mouseY)) \n        {\n          selectedKey = keyArray[findKeyIndex];\n          findKeyIndex = keyArray.length;\n          selectedBlackKey = true;\n        }\n      }\n      else \n      {\n        whiteKeys.push(keyArray[findKeyIndex]);\n      }\n      findKeyIndex += 1;\n    }\n    // if black key wasn't selected, then iterate through white keys\n    if(!selectedBlackKey) \n    {\n      findKeyIndex = 0;\n      while(findKeyIndex < whiteKeys.length) \n      {\n        if(whiteKeys[findKeyIndex].contains(p5.mouseX, p5.mouseY)) \n        {\n          selectedKey = whiteKeys[findKeyIndex];\n          findKeyIndex = whiteKeys.length;\n        }\n\n        findKeyIndex += 1;\n      }\n    }\n\n    p5.fill(0);\n    if(selectedKey == null) {\n      p5.text(\"Please press on a piano key! :)\", textX, textY);\n    } else {\n      p5.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n    }\n\n    return selectedKey;\n\n  }\n\n  // end of main functions\n\n\n\n  /**\n  Abstract class to hold Piano Key note name, sound file, and top-left Y position\n  (tbh not sure if abstract is the correct term, but don't initialize this)\n  */\n  class PianoKey \n  {\n    constructor(note, keyboardKey, sound) \n    {\n      this.note = note;\n      this.keyboardKey = keyboardKey;\n      this.sound = p5.loadSound(sound);\n      this.startY = 20;\n    }\n\n    play() {\n      this.sound.play();\n    }\n\n    contains(x, y) \n    {\n      if(x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) \n      {\n        return true;\n      }\n      return false;\n    }\n\n    changeKeyboardKey() {\n      this.keyboardKey = p5.key;\n      p5.redraw();\n      p5.text(`New key = ${p5.key} for ${this.note}`, textX, textY);\n    }\n\n    getNote() {\n      return this.note;\n    }\n\n    getKeyboardKey() {\n      return this.keyboardKey;\n    }\n\n  }\n\n\n  /**\n  White piano key class\n  */\n  class WhiteKey extends PianoKey\n  {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 30;\n      this.height = 140;\n      this.drawWhiteKey();\n    }\n\n    drawKey() {\n      this.drawWhiteKey();\n    }\n\n    // 75 because that's the height of a black key\n    drawPressedKey() {\n      p5.strokeWeight(0);\n      p5.fill(200)\n      p5.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n      p5.strokeWeight(4);\n      p5.fill(0);\n      p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawWhiteKey() {\n      p5.noFill();\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(0);\n      p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n    }\n\n\n  } // end WhiteKey\n\n\n\n  /**\n  Black piano key class\n  */\n  class BlackKey extends PianoKey\n  {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 20;\n      this.height = 75;\n      this.drawBlackKey();\n    }\n\n    drawKey() {\n      this.drawBlackKey();\n    }\n\n    drawPressedKey() {\n      p5.fill(100);\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(255);\n      p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      super.play()\n    }\n\n    drawBlackKey() {\n      p5.fill(0);\n      p5.rect(this.startX, this.startY, this.width, this.height);\n      p5.fill(255);\n      p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n    }\n\n  } // end BlackKey\n\n\n\n  /**\n  Class to represent a user & their keyboard mappings\n  */\n  class User \n  {\n    // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n    constructor(keys) {\n      this.allKeys = keys;\n      // format for recordings [{},{}]\n      // recording = {timeInMillisec, PianoKey}\n      this.recordings = [];\n    }\n\n    updateKeyMappings(keys) {\n      this.allKeys = keys;\n    } \n\n    // this resets the keyArray accessible throughout the entire file to the default mapping as well\n    revertToDefaultMapping() \n    {\n      let addKeyIndex = 0;\n      for(let note in defaultKeyMapping) \n      {\n        if(defaultKeyMapping[note][0] === \"white\")\n        {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n        else \n        {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n        addKeyIndex += 1;\n      }\n      this.allKeys = keyArray\n    }\n\n    getKeyMappings() {\n      return this.allKeys;\n    }\n\n    addRecording() {\n      this.recordings.push(recording);\n      // for(let time in recording) {\n      //  print(time, recording[time].getNote());\n      // }\n    }\n\n    getRecordings() {\n      return this.recordings;\n    }\n\n  } // end User\n};"]},"metadata":{},"sourceType":"module"}