{"ast":null,"code":"import React from \"react\";\nimport p5 from \"p5\";\nimport \"p5/lib/addons/p5.sound\";\nexport default function sketch(p) {\n  let canvas;\n  let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n\n  let currentUser;\n  let keyArray = [];\n  let recording = {};\n  let startTime = 0;\n  let soundFiles = [\"https://nguyenshana.github.io/piano-sounds/c1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/e1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/b1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"];\n  let defaultKeyMapping = {\n    \"c1\": [\"white\", \"a\", soundFiles[0], 20],\n    \"c1#\": [\"black\", \"s\", soundFiles[1], 40],\n    \"d1\": [\"white\", \"d\", soundFiles[2], 50],\n    \"d1#\": [\"black\", \"e\", soundFiles[3], 70],\n    \"e1\": [\"white\", \"f\", soundFiles[4], 80],\n    \"f1\": [\"white\", \"g\", soundFiles[5], 110],\n    \"f1#\": [\"black\", \"h\", soundFiles[6], 130],\n    \"g1\": [\"white\", \"j\", soundFiles[7], 140],\n    \"g1#\": [\"black\", \"u\", soundFiles[8], 160],\n    \"a1\": [\"white\", \"k\", soundFiles[9], 170],\n    \"a1#\": [\"black\", \"i\", soundFiles[10], 190],\n    \"c2\": [\"white\", \"l\", soundFiles[11], 200]\n  }; // end main variables\n\n  p.setup = () => {\n    p.noLoop();\n    p.strokeWeight(4);\n\n    if (state === 0) {\n      let addKeyIndex = 0;\n\n      for (let note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      currentUser = new User(keyArray);\n    }\n  }; // not sure if this can a ctually be called from React\n\n\n  p.setState = stateNum => {\n    state = stateNum;\n  }; // currently drawing keys in order from left to right\n\n\n  p.draw = () => {\n    p.fill(0);\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n\n    if (state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n        // draws keys\n        for (let i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        p.drawMapButton();\n        p.drawRecordButton();\n      } else if (state === 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for (let j = 0; j < keyArray.length; j++) {\n          keyArray[j].drawKey();\n        }\n\n        p.drawMapButton();\n        p.drawRecordButton();\n      } else if (state === 2) // changing keystrokes\n      {\n        // draws keys\n        for (let k = 0; k < keyArray.length; k++) {\n          keyArray[k].drawKey();\n        }\n\n        p.drawPlayButton();\n      } else if (state === 3) // recording\n      {\n        // draws keys\n        for (let l = 0; l < keyArray.length; l++) {\n          keyArray[l].drawKey();\n        }\n\n        p.drawEndRecordingButton();\n      }\n  }; // end draw()\n\n  /* BUTTON SECTION */\n\n\n  let buttonX = 300;\n  let buttonY = 100;\n  let buttonWidth = 180;\n  let buttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p.drawMapButton = () => {\n    p.fill(0);\n    p.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p.fill(255);\n    p.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p.drawPlayButton = () => {\n    p.fill(255);\n    p.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    p.fill(0);\n    p.text('Click here to play piano', buttonX + 25, buttonY + 20);\n  };\n  /* RECORDING BUTTON SECTION */\n\n\n  let rbuttonX = 300;\n  let rbuttonY = 50;\n  let rbuttonWidth = 100;\n  let rbuttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p.drawRecordButton = () => {\n    p.fill(0);\n    p.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p.fill(255);\n    p.text('Record', rbuttonX + 30, rbuttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p.drawEndRecordingButton = () => {\n    p.fill(255);\n    p.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    p.fill(0);\n    p.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n  };\n  /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n\n  let currentSelectedKey = null;\n  let textX = 30;\n  let textY = 200;\n  /**\n  Function is called when a keyboard key is pressed\n  */\n\n  p.keyPressed = () => {\n    p.redraw();\n    p.fill(0);\n\n    if (state === 0 || state === 1 || state === 3) {\n      p.text(`Key pressed: ${p.key}`, textX, textY); // \n      // loop through ALL of list to find corresponding key(s) & then play the audio\n      //\n\n      for (let m = 0; m < keyArray.length; m++) {\n        if (keyArray[m].getKeyboardKey() === p.key) {\n          keyArray[m].drawPressedKey();\n        }\n      }\n    } else if (state === 2) {\n      // change the keymapping and notify user\n      // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n      if (currentSelectedKey != null) {\n        let sameKeyIndex = 0;\n\n        while (sameKeyIndex < keyArray.length) {\n          if (keyArray[sameKeyIndex] === currentSelectedKey) {\n            break;\n          }\n\n          sameKeyIndex += 1;\n        }\n\n        keyArray[sameKeyIndex].changeKeyboardKey();\n        currentUser.updateKeyMappings(keyArray);\n        currentSelectedKey = null;\n      }\n    }\n\n    if (state === 3) {\n      // recording\n      let selectedKey;\n\n      for (let n = 0; n < keyArray.length; n++) {\n        if (keyArray[n].getKeyboardKey() === p.key) {\n          selectedKey = keyArray[n];\n          recording[p.millis() - startTime] = selectedKey;\n        }\n      }\n    }\n  }; // end keyPressed()\n\n\n  p.keyReleased = () => {\n    p.redraw();\n  };\n  /**\n  Function is called when mouse left button is pressed\n  */\n\n\n  p.mouseClicked = () => {\n    // state button is pressed\n    if (p.mouseX > buttonX && p.mouseX < buttonX + buttonWidth && p.mouseY > buttonY && p.mouseY < buttonY + buttonHeight) {\n      if (state === 2) {\n        state = 1;\n        p.redraw();\n      } else if (state === 0 || state === 1) {\n        state = 2;\n        p.redraw();\n      }\n    } else if (state === 2) {\n      // see if user if selecting a key to remap\n      currentSelectedKey = p.selectKeyToRemap();\n    }\n\n    if (p.mouseX > rbuttonX && p.mouseX < rbuttonX + rbuttonWidth && p.mouseY > rbuttonY && p.mouseY < rbuttonY + rbuttonHeight) {\n      if (state === 0 || state === 1) {\n        // starting recording\n        state = 3;\n        recording = {};\n        startTime = p.millis();\n      } else if (state === 3) {\n        // ending recording\n        state = 1;\n        currentUser.addRecording();\n      }\n\n      p.redraw();\n    }\n  }; // end mouseClicked()\n\n  /**\n  Finds which piano key is clicked on and returns it\n  */\n\n\n  p.selectKeyToRemap = () => {\n    p.redraw();\n    let whiteKeys = [];\n    let selectedBlackKey = false;\n    let selectedKey = null; // iterate through black keys first because they're visually \"on top\"\n\n    let findKeyIndex = 0;\n\n    while (findKeyIndex < keyArray.length) {\n      if (keyArray[findKeyIndex].constructor.name === \"BlackKey\") {\n        if (keyArray[findKeyIndex].contains(p.mouseX, p.mouseY)) {\n          selectedKey = keyArray[findKeyIndex];\n          findKeyIndex = keyArray.length;\n          selectedBlackKey = true;\n        }\n      } else {\n        whiteKeys.push(keyArray[findKeyIndex]);\n      }\n\n      findKeyIndex += 1;\n    } // if black key wasn't selected, then iterate through white keys\n\n\n    if (!selectedBlackKey) {\n      findKeyIndex = 0;\n\n      while (findKeyIndex < whiteKeys.length) {\n        if (whiteKeys[findKeyIndex].contains(p.mouseX, p.mouseY)) {\n          selectedKey = whiteKeys[findKeyIndex];\n          findKeyIndex = whiteKeys.length;\n        }\n\n        findKeyIndex += 1;\n      }\n    }\n\n    p.fill(0);\n\n    if (selectedKey == null) {\n      p.text(\"Please press on a piano key! :)\", textX, textY);\n    } else {\n      p.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n    }\n\n    return selectedKey;\n  }; // end of main functions\n\n  /**\n  Abstract class to hold Piano Key note name, sound file, and top-left Y position\n  (tbh not sure if abstract is the correct term, but don't initialize this)\n  */\n\n\n  class PianoKey {\n    constructor(note, keyboardKey, sound) {\n      this.note = note;\n      this.keyboardKey = keyboardKey;\n      this.sound = p.loadSound(sound);\n      this.startY = 20;\n    }\n\n    play() {\n      this.sound.play();\n    }\n\n    contains(x, y) {\n      if (x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) {\n        return true;\n      }\n\n      return false;\n    }\n\n    changeKeyboardKey() {\n      this.keyboardKey = p.key;\n      p.redraw();\n      p.text(`New key = ${p.key} for ${this.note}`, textX, textY);\n    }\n\n    getNote() {\n      return this.note;\n    }\n\n    getKeyboardKey() {\n      return this.keyboardKey;\n    }\n\n  }\n  /**\n  White piano key class\n  */\n\n\n  class WhiteKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 30;\n      this.height = 140;\n      this.drawWhiteKey();\n    }\n\n    drawKey() {\n      this.drawWhiteKey();\n    } // 75 because that's the height of a black key\n\n\n    drawPressedKey() {\n      p.strokeWeight(0);\n      p.fill(200);\n      p.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n      p.strokeWeight(4);\n      p.fill(0);\n      p.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawWhiteKey() {\n      p.noFill();\n      p.rect(this.startX, this.startY, this.width, this.height);\n      p.fill(0);\n      p.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end WhiteKey\n\n  /**\n  Black piano key class\n  */\n\n\n  class BlackKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 20;\n      this.height = 75;\n      this.drawBlackKey();\n    }\n\n    drawKey() {\n      this.drawBlackKey();\n    }\n\n    drawPressedKey() {\n      p.fill(100);\n      p.rect(this.startX, this.startY, this.width, this.height);\n      p.fill(255);\n      p.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawBlackKey() {\n      p.fill(0);\n      p.rect(this.startX, this.startY, this.width, this.height);\n      p.fill(255);\n      p.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end BlackKey\n\n  /**\n  Class to represent a user & their keyboard mappings\n  */\n\n\n  class User {\n    // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n    constructor(keys) {\n      this.allKeys = keys; // format for recordings [{},{}]\n      // recording = {timeInMillisec, PianoKey}\n\n      this.recordings = [];\n    }\n\n    updateKeyMappings(keys) {\n      this.allKeys = keys;\n    } // this resets the keyArray accessible throughout the entire file to the default mapping as well\n\n\n    revertToDefaultMapping() {\n      let addKeyIndex = 0;\n\n      for (let note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      this.allKeys = keyArray;\n    }\n\n    getKeyMappings() {\n      return this.allKeys;\n    }\n\n    addRecording() {\n      this.recordings.push(recording); // for(let time in recording) {\n      //  print(time, recording[time].getNote());\n      // }\n    }\n\n    getRecordings() {\n      return this.recordings;\n    }\n\n  } // end User\n\n}","map":{"version":3,"sources":["/Users/shana/Desktop/DesktopItems/CMPE 133/peeano/peeano-frontend/src/sketches/sketch.js"],"names":["React","p5","sketch","p","canvas","state","currentUser","keyArray","recording","startTime","soundFiles","defaultKeyMapping","setup","noLoop","strokeWeight","addKeyIndex","note","WhiteKey","BlackKey","User","setState","stateNum","draw","fill","createCanvas","windowWidth","windowHeight","i","length","drawKey","drawMapButton","drawRecordButton","j","k","drawPlayButton","l","drawEndRecordingButton","buttonX","buttonY","buttonWidth","buttonHeight","rect","text","rbuttonX","rbuttonY","rbuttonWidth","rbuttonHeight","currentSelectedKey","textX","textY","keyPressed","redraw","key","m","getKeyboardKey","drawPressedKey","sameKeyIndex","changeKeyboardKey","updateKeyMappings","selectedKey","n","millis","keyReleased","mouseClicked","mouseX","mouseY","selectKeyToRemap","addRecording","whiteKeys","selectedBlackKey","findKeyIndex","constructor","name","contains","push","getNote","PianoKey","keyboardKey","sound","loadSound","startY","play","x","y","startX","width","height","drawWhiteKey","noFill","drawBlackKey","keys","allKeys","recordings","revertToDefaultMapping","getKeyMappings","getRecordings"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\nimport \"p5/lib/addons/p5.sound\";\n\n\nexport default function sketch(p) {\n\n    let canvas;\n    let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n    let currentUser;\n    let keyArray = [];\n\n    let recording = {};\n    let startTime = 0;\n\n    let soundFiles = [\n      \"https://nguyenshana.github.io/piano-sounds/c1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/e1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/b1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"\n    ]\n\n    let defaultKeyMapping = {\n      \"c1\" : [\"white\", \"a\", soundFiles[0], 20],\n      \"c1#\" : [\"black\", \"s\", soundFiles[1], 40],\n      \"d1\" : [\"white\", \"d\", soundFiles[2], 50],\n      \"d1#\" : [\"black\", \"e\", soundFiles[3], 70],\n      \"e1\" : [\"white\", \"f\", soundFiles[4], 80],\n\n      \"f1\" : [\"white\", \"g\", soundFiles[5], 110],\n      \"f1#\" : [\"black\", \"h\", soundFiles[6], 130],\n      \"g1\" : [\"white\", \"j\", soundFiles[7], 140],\n      \"g1#\" : [\"black\", \"u\", soundFiles[8], 160],\n      \"a1\" : [\"white\", \"k\", soundFiles[9], 170],\n      \"a1#\" :[\"black\", \"i\", soundFiles[10], 190],\n      \"c2\" : [\"white\", \"l\", soundFiles[11], 200]\n    }\n\n    // end main variables\n\n\n\n    p.setup = () => \n    {    \n\n      p.noLoop();\n      p.strokeWeight(4);\n\n      if(state === 0) {\n        let addKeyIndex = 0;\n        for(let note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n\n        currentUser = new User(keyArray);\n      }\n\n    }\n\n\n    // not sure if this can a ctually be called from React\n    p.setState = (stateNum) =>\n    {\n      state = stateNum;\n    }\n\n\n    // currently drawing keys in order from left to right\n    p.draw = () =>\n    {\n      p.fill(0);\n      canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n      if(state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n\n        // draws keys\n        for(let i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        p.drawMapButton();\n\n        p.drawRecordButton();\n\n      } \n      else if (state === 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for(let j = 0; j < keyArray.length; j++) \n        {\n          keyArray[j].drawKey();\n        }\n        p.drawMapButton();\n\n        p.drawRecordButton();\n\n      }\n      else if (state === 2) // changing keystrokes\n      {\n        // draws keys\n        for(let k = 0; k < keyArray.length; k++) \n        {\n          keyArray[k].drawKey();\n        }\n        p.drawPlayButton();\n\n      }\n      else if (state === 3) // recording\n      {\n        // draws keys\n        for(let l = 0; l < keyArray.length; l++) \n        {\n          keyArray[l].drawKey();\n        }\n\n        p.drawEndRecordingButton();\n\n      }\n\n    } // end draw()\n\n\n\n    /* BUTTON SECTION */\n\n    let buttonX = 300;\n    let buttonY = 100;\n    let buttonWidth = 180;\n    let buttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawMapButton = () => {\n      p.fill(0);\n      p.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p.fill(255);\n      p.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawPlayButton = () => {\n      p.fill(255);\n      p.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p.fill(0);\n      p.text('Click here to play piano', buttonX + 25, buttonY + 20);\n    }\n\n\n    /* RECORDING BUTTON SECTION */\n\n    let rbuttonX = 300;\n    let rbuttonY = 50;\n    let rbuttonWidth = 100;\n    let rbuttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawRecordButton = () => {\n      p.fill(0);\n      p.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p.fill(255);\n      p.text('Record', rbuttonX + 30, rbuttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawEndRecordingButton = () => {\n      p.fill(255);\n      p.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p.fill(0);\n      p.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n    }\n\n\n\n    /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n    let currentSelectedKey = null;\n    let textX = 30;\n    let textY = 200;\n\n    /**\n    Function is called when a keyboard key is pressed\n    */\n    p.keyPressed = () =>\n    {\n      p.redraw();\n      p.fill(0);\n      if(state === 0 || state === 1 || state === 3) {\n        p.text(`Key pressed: ${p.key}`, textX, textY);\n        // \n        // loop through ALL of list to find corresponding key(s) & then play the audio\n        //\n        for(let m = 0; m < keyArray.length; m++) {\n          if(keyArray[m].getKeyboardKey() === p.key) {\n            keyArray[m].drawPressedKey();\n          }\n        }\n      }\n      else if (state === 2) { // change the keymapping and notify user\n        // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n\n        if(currentSelectedKey != null) \n        {\n          let sameKeyIndex = 0;\n          while(sameKeyIndex < keyArray.length) \n          {\n            if(keyArray[sameKeyIndex] === currentSelectedKey) \n            {\n              break;\n            }\n            sameKeyIndex += 1;\n          }\n          keyArray[sameKeyIndex].changeKeyboardKey();\n          currentUser.updateKeyMappings(keyArray);\n          currentSelectedKey = null;\n        }\n      }\n      if (state === 3) { // recording\n        let selectedKey;\n        for(let n = 0; n < keyArray.length; n++) {\n          if(keyArray[n].getKeyboardKey() === p.key) {\n            selectedKey = keyArray[n];\n            recording[p.millis() - startTime] = selectedKey;\n          }\n        }\n      }\n\n    } // end keyPressed()\n\n\n    p.keyReleased = () => {\n      p.redraw();\n    }\n\n\n    /**\n    Function is called when mouse left button is pressed\n    */\n    p.mouseClicked = () =>\n    {\n      // state button is pressed\n      if(p.mouseX > buttonX && p.mouseX < buttonX + buttonWidth && p.mouseY > buttonY && p.mouseY < buttonY + buttonHeight) \n      {\n        if(state === 2) \n        {\n          state = 1;\n          p.redraw();\n        }\n        else if (state === 0 || state === 1) \n        {\n          state = 2;\n          p.redraw();\n        } \n      } \n      else if(state === 2) \n      { // see if user if selecting a key to remap\n        currentSelectedKey = p.selectKeyToRemap();\n      }\n      if(p.mouseX > rbuttonX && p.mouseX < rbuttonX + rbuttonWidth && p.mouseY > rbuttonY && p.mouseY < rbuttonY + rbuttonHeight) \n      {\n        if(state === 0 || state === 1) \n        { // starting recording\n          state = 3;\n          recording = {};\n          startTime = p.millis();\n        }\n        else if(state === 3) \n        { // ending recording\n          state = 1;\n          currentUser.addRecording();\n        }\n        p.redraw();\n      }\n\n    } // end mouseClicked()\n\n\n    /**\n    Finds which piano key is clicked on and returns it\n    */\n    p.selectKeyToRemap = () => {\n\n      p.redraw();\n      let whiteKeys = [];\n      let selectedBlackKey = false;\n      let selectedKey = null;\n\n      // iterate through black keys first because they're visually \"on top\"\n      let findKeyIndex = 0;\n      while(findKeyIndex < keyArray.length) \n      {\n        if(keyArray[findKeyIndex].constructor.name === \"BlackKey\") \n        {\n          if(keyArray[findKeyIndex].contains(p.mouseX, p.mouseY)) \n          {\n            selectedKey = keyArray[findKeyIndex];\n            findKeyIndex = keyArray.length;\n            selectedBlackKey = true;\n          }\n        }\n        else \n        {\n          whiteKeys.push(keyArray[findKeyIndex]);\n        }\n        findKeyIndex += 1;\n      }\n      // if black key wasn't selected, then iterate through white keys\n      if(!selectedBlackKey) \n      {\n        findKeyIndex = 0;\n        while(findKeyIndex < whiteKeys.length) \n        {\n          if(whiteKeys[findKeyIndex].contains(p.mouseX, p.mouseY)) \n          {\n            selectedKey = whiteKeys[findKeyIndex];\n            findKeyIndex = whiteKeys.length;\n          }\n\n          findKeyIndex += 1;\n        }\n      }\n\n      p.fill(0);\n      if(selectedKey == null) {\n        p.text(\"Please press on a piano key! :)\", textX, textY);\n      } else {\n        p.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n      }\n\n      return selectedKey;\n\n    }\n\n    // end of main functions\n\n\n\n    /**\n    Abstract class to hold Piano Key note name, sound file, and top-left Y position\n    (tbh not sure if abstract is the correct term, but don't initialize this)\n    */\n    class PianoKey \n    {\n      constructor(note, keyboardKey, sound) \n      {\n        this.note = note;\n        this.keyboardKey = keyboardKey;\n        this.sound = p.loadSound(sound);\n        this.startY = 20;\n      }\n\n      play() {\n        this.sound.play();\n      }\n\n      contains(x, y) \n      {\n        if(x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) \n        {\n          return true;\n        }\n        return false;\n      }\n\n      changeKeyboardKey() {\n        this.keyboardKey = p.key;\n        p.redraw();\n        p.text(`New key = ${p.key} for ${this.note}`, textX, textY);\n      }\n\n      getNote() {\n        return this.note;\n      }\n\n      getKeyboardKey() {\n        return this.keyboardKey;\n      }\n\n    }\n\n\n    /**\n    White piano key class\n    */\n    class WhiteKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 30;\n        this.height = 140;\n        this.drawWhiteKey();\n      }\n\n      drawKey() {\n        this.drawWhiteKey();\n      }\n\n      // 75 because that's the height of a black key\n      drawPressedKey() {\n        p.strokeWeight(0);\n        p.fill(200)\n        p.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n        p.strokeWeight(4);\n        p.fill(0);\n        p.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawWhiteKey() {\n        p.noFill();\n        p.rect(this.startX, this.startY, this.width, this.height);\n        p.fill(0);\n        p.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n\n    } // end WhiteKey\n\n\n\n    /**\n    Black piano key class\n    */\n    class BlackKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 20;\n        this.height = 75;\n        this.drawBlackKey();\n      }\n\n      drawKey() {\n        this.drawBlackKey();\n      }\n\n      drawPressedKey() {\n        p.fill(100);\n        p.rect(this.startX, this.startY, this.width, this.height);\n        p.fill(255);\n        p.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play()\n      }\n\n      drawBlackKey() {\n        p.fill(0);\n        p.rect(this.startX, this.startY, this.width, this.height);\n        p.fill(255);\n        p.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n    } // end BlackKey\n\n\n\n    /**\n    Class to represent a user & their keyboard mappings\n    */\n    class User \n    {\n      // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n      constructor(keys) {\n        this.allKeys = keys;\n        // format for recordings [{},{}]\n        // recording = {timeInMillisec, PianoKey}\n        this.recordings = [];\n      }\n\n      updateKeyMappings(keys) {\n        this.allKeys = keys;\n      } \n\n      // this resets the keyArray accessible throughout the entire file to the default mapping as well\n      revertToDefaultMapping() \n      {\n        let addKeyIndex = 0;\n        for(let note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n        this.allKeys = keyArray\n      }\n\n      getKeyMappings() {\n        return this.allKeys;\n      }\n\n      addRecording() {\n        this.recordings.push(recording);\n        // for(let time in recording) {\n        //  print(time, recording[time].getNote());\n        // }\n      }\n\n      getRecordings() {\n        return this.recordings;\n      }\n\n    } // end User\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}