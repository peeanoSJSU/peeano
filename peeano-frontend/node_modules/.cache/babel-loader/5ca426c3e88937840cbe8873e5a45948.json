{"ast":null,"code":"import React from 'react';\nexport default function sketch(p) {\n  var canvas;\n  var state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n\n  var currentUser;\n  var keyArray = [];\n  var recording = {};\n  var startTime = 0;\n  var soundFiles = [\"https://nguyenshana.github.io/piano-sounds/c1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/e1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/b1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"];\n  var defaultKeyMapping = {\n    \"c1\": [\"white\", \"a\", soundFiles[0], 20],\n    \"c1#\": [\"black\", \"s\", soundFiles[1], 40],\n    \"d1\": [\"white\", \"d\", soundFiles[2], 50],\n    \"d1#\": [\"black\", \"e\", soundFiles[3], 70],\n    \"e1\": [\"white\", \"f\", soundFiles[4], 80],\n    \"f1\": [\"white\", \"g\", soundFiles[5], 110],\n    \"f1#\": [\"black\", \"h\", soundFiles[6], 130],\n    \"g1\": [\"white\", \"j\", soundFiles[7], 140],\n    \"g1#\": [\"black\", \"u\", soundFiles[8], 160],\n    \"a1\": [\"white\", \"k\", soundFiles[9], 170],\n    \"a1#\": [\"black\", \"i\", soundFiles[10], 190],\n    \"c2\": [\"white\", \"l\", soundFiles[11], 200]\n  }; // end main variables\n\n  p.setup = () => {\n    noLoop();\n    strokeWeight(4);\n\n    if (state == 0) {\n      var addKeyIndex = 0;\n\n      for (var note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      currentUser = new User(keyArray);\n    }\n  }; // not sure if this can a ctually be called from React\n\n\n  p.setState = stateNum => {\n    state = stateNum;\n  }; // currently drawing keys in order from left to right\n\n\n  p.draw = () => {\n    fill(0);\n    canvas = createCanvas(windowWidth, windowHeight);\n\n    if (state == 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n        // draws keys\n        for (var i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        drawMapButton();\n        drawRecordButton();\n        print(\"state = 0\");\n      } else if (state == 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for (var i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        drawMapButton();\n        drawRecordButton();\n        print(\"state = 1 :)\");\n      } else if (state == 2) // changing keystrokes\n      {\n        // draws keys\n        for (var i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        drawPlayButton();\n        print(\"state = 2 :))\");\n      } else if (state == 3) // recording\n      {\n        // draws keys\n        for (var i = 0; i < keyArray.length; i++) {\n          keyArray[i].drawKey();\n        }\n\n        drawEndRecordingButton();\n        print(\"state = 3\");\n      }\n  }; // end draw()\n\n  /* BUTTON SECTION */\n\n\n  var buttonX = 300;\n  var buttonY = 100;\n  var buttonWidth = 180;\n  var buttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p.drawMapButton = () => {\n    fill(0);\n    rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    fill(255);\n    text('Click here to change mappings', buttonX + 7, buttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p.drawPlayButton = () => {\n    fill(255);\n    rect(buttonX, buttonY, buttonWidth, buttonHeight);\n    fill(0);\n    text('Click here to play piano', buttonX + 25, buttonY + 20);\n  };\n  /* RECORDING BUTTON SECTION */\n\n\n  var rbuttonX = 300;\n  var rbuttonY = 50;\n  var rbuttonWidth = 100;\n  var rbuttonHeight = 30;\n  /**\n  Draws button to display for user to change to map mode\n  */\n\n  p.drawRecordButton = () => {\n    fill(0);\n    rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    fill(255);\n    text('Record', rbuttonX + 30, rbuttonY + 20);\n  };\n  /**\n  Draws button to display for user to change to regular mode\n  */\n\n\n  p.drawEndRecordingButton = () => {\n    fill(255);\n    rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n    fill(0);\n    text('End Recording', rbuttonX + 10, rbuttonY + 20);\n  };\n  /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n\n  var currentSelectedKey = null;\n  var textX = 30;\n  var textY = 200;\n  /**\n  Function is called when a keyboard key is pressed\n  */\n\n  p.keyPressed = () => {\n    redraw();\n    fill(0);\n\n    if (state == 0 || state == 1 || state == 3) {\n      text(`Key pressed: ${key}`, textX, textY); // \n      // loop through ALL of list to find corresponding key(s) & then play the audio\n      //\n\n      for (var i = 0; i < keyArray.length; i++) {\n        if (keyArray[i].getKeyboardKey() == key) {\n          keyArray[i].drawPressedKey();\n        }\n      }\n    } else if (state == 2) {\n      // change the keymapping and notify user\n      // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n      if (currentSelectedKey != null) {\n        var sameKeyIndex = 0;\n\n        while (sameKeyIndex < keyArray.length) {\n          if (keyArray[sameKeyIndex] === currentSelectedKey) {\n            break;\n          }\n\n          sameKeyIndex += 1;\n        }\n\n        keyArray[sameKeyIndex].changeKeyboardKey();\n        currentUser.updateKeyMappings(keyArray);\n        currentSelectedKey = null;\n      }\n    }\n\n    if (state == 3) {\n      // recording\n      var selectedKey;\n\n      for (var i = 0; i < keyArray.length; i++) {\n        if (keyArray[i].getKeyboardKey() == key) {\n          selectedKey = keyArray[i];\n          recording[millis() - startTime] = selectedKey;\n        }\n      }\n    }\n  }; // end keyPressed()\n\n\n  p.keyReleased = () => {\n    redraw();\n  };\n  /**\n  Function is called when mouse left button is pressed\n  */\n\n\n  p.mouseClicked = () => {\n    // state button is pressed\n    if (mouseX > buttonX && mouseX < buttonX + buttonWidth && mouseY > buttonY && mouseY < buttonY + buttonHeight) {\n      if (state == 2) {\n        state = 1;\n        redraw();\n      } else if (state == 0 || state == 1) {\n        state = 2;\n        redraw();\n      }\n    } else if (state == 2) {\n      // see if user if selecting a key to remap\n      currentSelectedKey = selectKeyToRemap();\n    }\n\n    if (mouseX > rbuttonX && mouseX < rbuttonX + rbuttonWidth && mouseY > rbuttonY && mouseY < rbuttonY + rbuttonHeight) {\n      if (state == 0 || state == 1) {\n        // starting recording\n        state = 3;\n        recording = {};\n        startTime = millis();\n      } else if (state == 3) {\n        // ending recording\n        state = 1;\n        currentUser.addRecording();\n      }\n\n      redraw();\n    }\n  }; // end mouseClicked()\n\n  /**\n  Finds which piano key is clicked on and returns it\n  */\n\n\n  p.selectKeyToRemap = () => {\n    redraw();\n    var whiteKeys = [];\n    var selectedBlackKey = false;\n    var selectedKey = null; // iterate through black keys first because they're visually \"on top\"\n\n    var findKeyIndex = 0;\n\n    while (findKeyIndex < keyArray.length) {\n      if (keyArray[findKeyIndex].constructor.name == \"BlackKey\") {\n        if (keyArray[findKeyIndex].contains(mouseX, mouseY)) {\n          selectedKey = keyArray[findKeyIndex];\n          findKeyIndex = keyArray.length;\n          selectedBlackKey = true;\n        }\n      } else {\n        whiteKeys.push(keyArray[findKeyIndex]);\n      }\n\n      findKeyIndex += 1;\n    } // if black key wasn't selected, then iterate through white keys\n\n\n    if (!selectedBlackKey) {\n      findKeyIndex = 0;\n\n      while (findKeyIndex < whiteKeys.length) {\n        if (whiteKeys[findKeyIndex].contains(mouseX, mouseY)) {\n          selectedKey = whiteKeys[findKeyIndex];\n          findKeyIndex = whiteKeys.length;\n        }\n\n        findKeyIndex += 1;\n      }\n    }\n\n    fill(0);\n\n    if (selectedKey == null) {\n      text(\"Please press on a piano key! :)\", textX, textY);\n    } else {\n      text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n    }\n\n    return selectedKey;\n  }; // end of main functions\n\n  /**\n  Abstract class to hold Piano Key note name, sound file, and top-left Y position\n  (tbh not sure if abstract is the correct term, but don't initialize this)\n  */\n\n\n  class PianoKey {\n    constructor(note, keyboardKey, sound) {\n      this.note = note;\n      this.keyboardKey = keyboardKey;\n      this.sound = loadSound(sound);\n      this.startY = 20;\n    }\n\n    play() {\n      print(`${this.note} is played with keyboard key ${this.keyboardKey}`);\n      this.sound.play();\n    }\n\n    contains(x, y) {\n      if (x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) {\n        print(`${this.note} is clicked on`);\n        return true;\n      }\n\n      return false;\n    }\n\n    changeKeyboardKey() {\n      this.keyboardKey = key;\n      redraw();\n      text(`New key = ${key} for ${this.note}`, textX, textY);\n    }\n\n    getNote() {\n      return this.note;\n    }\n\n    getKeyboardKey() {\n      return this.keyboardKey;\n    }\n\n  }\n  /**\n  White piano key class\n  */\n\n\n  class WhiteKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 30;\n      this.height = 140;\n      this.drawWhiteKey();\n    }\n\n    drawKey() {\n      this.drawWhiteKey();\n    } // 75 because that's the height of a black key\n\n\n    drawPressedKey() {\n      strokeWeight(0);\n      fill(200);\n      rect(this.startX, this.startY + 75, this.width, this.height - 75);\n      strokeWeight(4);\n      fill(0);\n      text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawWhiteKey() {\n      noFill();\n      rect(this.startX, this.startY, this.width, this.height);\n      fill(0);\n      text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end WhiteKey\n\n  /**\n  Black piano key class\n  */\n\n\n  class BlackKey extends PianoKey {\n    // assume they all start at the same Y position\n    constructor(note, keyboardKey, sound, startX) {\n      super(note, keyboardKey, sound);\n      this.startX = startX;\n      this.width = 20;\n      this.height = 75;\n      this.drawBlackKey();\n    }\n\n    drawKey() {\n      this.drawBlackKey();\n    }\n\n    drawPressedKey() {\n      fill(100);\n      rect(this.startX, this.startY, this.width, this.height);\n      fill(255);\n      text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      super.play();\n    }\n\n    drawBlackKey() {\n      fill(0);\n      rect(this.startX, this.startY, this.width, this.height);\n      fill(255);\n      text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n    }\n\n  } // end BlackKey\n\n  /**\n  Class to represent a user & their keyboard mappings\n  */\n\n\n  class User {\n    // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n    constructor(keys) {\n      this.allKeys = keys; // format for recordings [{},{}]\n      // recording = {timeInMillisec, PianoKey}\n\n      this.recordings = [];\n    }\n\n    updateKeyMappings(keys) {\n      this.allKeys = keys;\n    } // this resets the keyArray accessible throughout the entire file to the default mapping as well\n\n\n    revertToDefaultMapping() {\n      for (var note in defaultKeyMapping) {\n        if (defaultKeyMapping[note][0] === \"white\") {\n          keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        } else {\n          keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n        }\n\n        addKeyIndex += 1;\n      }\n\n      this.allKeys = keyArray;\n    }\n\n    getKeyMappings() {\n      return this.allKeys;\n    }\n\n    addRecording() {\n      this.recordings.push(recording); // for(var time in recording) {\n      //  print(time, recording[time].getNote());\n      // }\n    }\n\n    getRecordings() {\n      return this.recordings;\n    }\n\n  } // end User\n\n}","map":{"version":3,"sources":["/Users/shana/Desktop/DesktopItems/CMPE 133/peeano/peeano-frontend/src/AppP5.js"],"names":["React","sketch","p","canvas","state","currentUser","keyArray","recording","startTime","soundFiles","defaultKeyMapping","setup","noLoop","strokeWeight","addKeyIndex","note","WhiteKey","BlackKey","User","setState","stateNum","draw","fill","createCanvas","windowWidth","windowHeight","i","length","drawKey","drawMapButton","drawRecordButton","print","drawPlayButton","drawEndRecordingButton","buttonX","buttonY","buttonWidth","buttonHeight","rect","text","rbuttonX","rbuttonY","rbuttonWidth","rbuttonHeight","currentSelectedKey","textX","textY","keyPressed","redraw","key","getKeyboardKey","drawPressedKey","sameKeyIndex","changeKeyboardKey","updateKeyMappings","selectedKey","millis","keyReleased","mouseClicked","mouseX","mouseY","selectKeyToRemap","addRecording","whiteKeys","selectedBlackKey","findKeyIndex","constructor","name","contains","push","getNote","PianoKey","keyboardKey","sound","loadSound","startY","play","x","y","startX","width","height","drawWhiteKey","noFill","drawBlackKey","keys","allKeys","recordings","revertToDefaultMapping","getKeyMappings","getRecordings"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nexport default function sketch(p) {\n\n    var canvas;\n    var state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n    var currentUser;\n    var keyArray = [];\n\n    var recording = {};\n    var startTime = 0;\n\n    var soundFiles = [\n      \"https://nguyenshana.github.io/piano-sounds/c1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/e1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/b1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"\n    ]\n\n    var defaultKeyMapping = {\n      \"c1\" : [\"white\", \"a\", soundFiles[0], 20],\n      \"c1#\" : [\"black\", \"s\", soundFiles[1], 40],\n      \"d1\" : [\"white\", \"d\", soundFiles[2], 50],\n      \"d1#\" : [\"black\", \"e\", soundFiles[3], 70],\n      \"e1\" : [\"white\", \"f\", soundFiles[4], 80],\n\n      \"f1\" : [\"white\", \"g\", soundFiles[5], 110],\n      \"f1#\" : [\"black\", \"h\", soundFiles[6], 130],\n      \"g1\" : [\"white\", \"j\", soundFiles[7], 140],\n      \"g1#\" : [\"black\", \"u\", soundFiles[8], 160],\n      \"a1\" : [\"white\", \"k\", soundFiles[9], 170],\n      \"a1#\" :[\"black\", \"i\", soundFiles[10], 190],\n      \"c2\" : [\"white\", \"l\", soundFiles[11], 200]\n    }\n\n    // end main variables\n\n\n\n    p.setup = () => \n    {    \n\n      noLoop();\n      strokeWeight(4);\n\n      if(state == 0) {\n        var addKeyIndex = 0;\n        for(var note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n\n        currentUser = new User(keyArray);\n      }\n\n    }\n\n\n    // not sure if this can a ctually be called from React\n    p.setState = (stateNum) =>\n    {\n      state = stateNum;\n    }\n\n\n    // currently drawing keys in order from left to right\n    p.draw = () =>\n    {\n      fill(0);\n      canvas = createCanvas(windowWidth, windowHeight);\n      if(state == 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawMapButton();\n\n        drawRecordButton();\n\n        print(\"state = 0\");\n\n      } \n      else if (state == 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawMapButton();\n\n        drawRecordButton();\n\n        print(\"state = 1 :)\");\n\n      }\n      else if (state == 2) // changing keystrokes\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawPlayButton();\n\n        print(\"state = 2 :))\");\n      }\n      else if (state == 3) // recording\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n\n        drawEndRecordingButton();\n\n        print(\"state = 3\");\n      }\n\n    } // end draw()\n\n\n\n    /* BUTTON SECTION */\n\n    var buttonX = 300;\n    var buttonY = 100;\n    var buttonWidth = 180;\n    var buttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawMapButton = () => {\n      fill(0);\n      rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      fill(255);\n      text('Click here to change mappings', buttonX + 7, buttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawPlayButton = () => {\n      fill(255);\n      rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      fill(0);\n      text('Click here to play piano', buttonX + 25, buttonY + 20);\n    }\n\n\n    /* RECORDING BUTTON SECTION */\n\n    var rbuttonX = 300;\n    var rbuttonY = 50;\n    var rbuttonWidth = 100;\n    var rbuttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawRecordButton = () => {\n      fill(0);\n      rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      fill(255);\n      text('Record', rbuttonX + 30, rbuttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawEndRecordingButton = () => {\n      fill(255);\n      rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      fill(0);\n      text('End Recording', rbuttonX + 10, rbuttonY + 20);\n    }\n\n\n\n    /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n    var currentSelectedKey = null;\n    var textX = 30;\n    var textY = 200;\n\n    /**\n    Function is called when a keyboard key is pressed\n    */\n    p.keyPressed = () =>\n    {\n      redraw();\n      fill(0);\n      if(state == 0 || state == 1 || state == 3) {\n        text(`Key pressed: ${key}`, textX, textY);\n        // \n        // loop through ALL of list to find corresponding key(s) & then play the audio\n        //\n        for(var i = 0; i < keyArray.length; i++) {\n          if(keyArray[i].getKeyboardKey() == key) {\n            keyArray[i].drawPressedKey();\n          }\n        }\n      }\n      else if (state == 2) { // change the keymapping and notify user\n        // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n\n        if(currentSelectedKey != null) \n        {\n          var sameKeyIndex = 0;\n          while(sameKeyIndex < keyArray.length) \n          {\n            if(keyArray[sameKeyIndex] === currentSelectedKey) \n            {\n              break;\n            }\n            sameKeyIndex += 1;\n          }\n          keyArray[sameKeyIndex].changeKeyboardKey();\n          currentUser.updateKeyMappings(keyArray);\n          currentSelectedKey = null;\n        }\n      }\n      if (state == 3) { // recording\n        var selectedKey;\n        for(var i = 0; i < keyArray.length; i++) {\n          if(keyArray[i].getKeyboardKey() == key) {\n            selectedKey = keyArray[i];\n            recording[millis() - startTime] = selectedKey;\n          }\n        }\n      }\n\n    } // end keyPressed()\n\n\n    p.keyReleased = () => {\n      redraw();\n    }\n\n\n    /**\n    Function is called when mouse left button is pressed\n    */\n    p.mouseClicked = () =>\n    {\n      // state button is pressed\n      if(mouseX > buttonX && mouseX < buttonX + buttonWidth && mouseY > buttonY && mouseY < buttonY + buttonHeight) \n      {\n        if(state == 2) \n        {\n          state = 1;\n          redraw();\n        }\n        else if (state == 0 || state == 1) \n        {\n          state = 2;\n          redraw();\n        } \n      } \n      else if(state == 2) \n      { // see if user if selecting a key to remap\n        currentSelectedKey = selectKeyToRemap();\n      }\n      if(mouseX > rbuttonX && mouseX < rbuttonX + rbuttonWidth && mouseY > rbuttonY && mouseY < rbuttonY + rbuttonHeight) \n      {\n        if(state == 0 || state == 1) \n        { // starting recording\n          state = 3;\n          recording = {};\n          startTime = millis();\n        }\n        else if(state == 3) \n        { // ending recording\n          state = 1;\n          currentUser.addRecording();\n        }\n        redraw();\n      }\n\n    } // end mouseClicked()\n\n\n    /**\n    Finds which piano key is clicked on and returns it\n    */\n    p.selectKeyToRemap = () => {\n\n      redraw();\n      var whiteKeys = [];\n      var selectedBlackKey = false;\n      var selectedKey = null;\n\n      // iterate through black keys first because they're visually \"on top\"\n      var findKeyIndex = 0;\n      while(findKeyIndex < keyArray.length) \n      {\n        if(keyArray[findKeyIndex].constructor.name == \"BlackKey\") \n        {\n          if(keyArray[findKeyIndex].contains(mouseX, mouseY)) \n          {\n            selectedKey = keyArray[findKeyIndex];\n            findKeyIndex = keyArray.length;\n            selectedBlackKey = true;\n          }\n        }\n        else \n        {\n          whiteKeys.push(keyArray[findKeyIndex]);\n        }\n        findKeyIndex += 1;\n      }\n      // if black key wasn't selected, then iterate through white keys\n      if(!selectedBlackKey) \n      {\n        findKeyIndex = 0;\n        while(findKeyIndex < whiteKeys.length) \n        {\n          if(whiteKeys[findKeyIndex].contains(mouseX, mouseY)) \n          {\n            selectedKey = whiteKeys[findKeyIndex];\n            findKeyIndex = whiteKeys.length;\n          }\n\n          findKeyIndex += 1;\n        }\n      }\n\n      fill(0);\n      if(selectedKey == null) {\n        text(\"Please press on a piano key! :)\", textX, textY);\n      } else {\n        text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n      }\n\n      return selectedKey;\n\n    }\n\n    // end of main functions\n\n\n\n    /**\n    Abstract class to hold Piano Key note name, sound file, and top-left Y position\n    (tbh not sure if abstract is the correct term, but don't initialize this)\n    */\n    class PianoKey \n    {\n      constructor(note, keyboardKey, sound) \n      {\n        this.note = note;\n        this.keyboardKey = keyboardKey;\n        this.sound = loadSound(sound);\n        this.startY = 20;\n      }\n\n      play() {\n        print(`${this.note} is played with keyboard key ${this.keyboardKey}`);\n        this.sound.play();\n      }\n\n      contains(x, y) \n      {\n        if(x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) \n        {\n          print(`${this.note} is clicked on`);\n          return true;\n        }\n        return false;\n      }\n\n      changeKeyboardKey() {\n        this.keyboardKey = key;\n        redraw();\n        text(`New key = ${key} for ${this.note}`, textX, textY);\n      }\n\n      getNote() {\n        return this.note;\n      }\n\n      getKeyboardKey() {\n        return this.keyboardKey;\n      }\n\n    }\n\n\n    /**\n    White piano key class\n    */\n    class WhiteKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 30;\n        this.height = 140;\n        this.drawWhiteKey();\n      }\n\n      drawKey() {\n        this.drawWhiteKey();\n      }\n\n      // 75 because that's the height of a black key\n      drawPressedKey() {\n        strokeWeight(0);\n        fill(200)\n        rect(this.startX, this.startY + 75, this.width, this.height - 75);\n        strokeWeight(4);\n        fill(0);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawWhiteKey() {\n        noFill();\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(0);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n\n    } // end WhiteKey\n\n\n\n    /**\n    Black piano key class\n    */\n    class BlackKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 20;\n        this.height = 75;\n        this.drawBlackKey();\n      }\n\n      drawKey() {\n        this.drawBlackKey();\n      }\n\n      drawPressedKey() {\n        fill(100);\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(255);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play()\n      }\n\n      drawBlackKey() {\n        fill(0);\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(255);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n    } // end BlackKey\n\n\n\n    /**\n    Class to represent a user & their keyboard mappings\n    */\n    class User \n    {\n      // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n      constructor(keys) {\n        this.allKeys = keys;\n        // format for recordings [{},{}]\n        // recording = {timeInMillisec, PianoKey}\n        this.recordings = [];\n      }\n\n      updateKeyMappings(keys) {\n        this.allKeys = keys;\n      } \n\n      // this resets the keyArray accessible throughout the entire file to the default mapping as well\n      revertToDefaultMapping() \n      {\n        for(var note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n        this.allKeys = keyArray\n      }\n\n      getKeyMappings() {\n        return this.allKeys;\n      }\n\n      addRecording() {\n        this.recordings.push(recording);\n        // for(var time in recording) {\n        //  print(time, recording[time].getNote());\n        // }\n      }\n\n      getRecordings() {\n        return this.recordings;\n      }\n\n    } // end User\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}