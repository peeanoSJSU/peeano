{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\n// import React from \"react\";\n// import 'p5/lib/addons/p5.sound';\nimport React, { useEffect } from \"react\";\nimport * as p5 from \"p5\";\n\nconst PianoSketch = () => {\n  _s();\n\n  const Sketch = p5 => {\n    let canvas;\n    let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n\n    let currentUser;\n    let keyArray = [];\n    let recording = {};\n    let startTime = 0;\n    let soundFiles = [\"https://nguyenshana.github.io/piano-sounds/c1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/e1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/b1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"];\n    let defaultKeyMapping = {\n      \"c1\": [\"white\", \"a\", soundFiles[0], 20],\n      \"c1#\": [\"black\", \"s\", soundFiles[1], 40],\n      \"d1\": [\"white\", \"d\", soundFiles[2], 50],\n      \"d1#\": [\"black\", \"e\", soundFiles[3], 70],\n      \"e1\": [\"white\", \"f\", soundFiles[4], 80],\n      \"f1\": [\"white\", \"g\", soundFiles[5], 110],\n      \"f1#\": [\"black\", \"h\", soundFiles[6], 130],\n      \"g1\": [\"white\", \"j\", soundFiles[7], 140],\n      \"g1#\": [\"black\", \"u\", soundFiles[8], 160],\n      \"a1\": [\"white\", \"k\", soundFiles[9], 170],\n      \"a1#\": [\"black\", \"i\", soundFiles[10], 190],\n      \"c2\": [\"white\", \"l\", soundFiles[11], 200]\n    }; // end main variables\n\n    p5.setup = () => {\n      p5.noLoop();\n      p5.strokeWeight(4);\n\n      if (state === 0) {\n        let addKeyIndex = 0;\n\n        for (let note in defaultKeyMapping) {\n          if (defaultKeyMapping[note][0] === \"white\") {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          } else {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n\n          addKeyIndex += 1;\n        }\n\n        currentUser = new User(keyArray);\n      }\n    }; // not sure if this can a ctually be called from React\n\n\n    p5.setState = stateNum => {\n      state = stateNum;\n    }; // currently drawing keys in order from left to right\n\n\n    p5.draw = () => {\n      p5.fill(0); //canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n\n      canvas = p5.createCanvas(500, 500);\n      canvas.parent('pianoPage'); //canvas.position(550,345);\n\n      canvas.position(550, p5.windowHeight / 3, 'relative');\n\n      if (state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n        {\n          // draws keys\n          for (let i = 0; i < keyArray.length; i++) {\n            keyArray[i].drawKey();\n          }\n\n          p5.drawMapButton();\n          p5.drawRecordButton();\n        } else if (state === 1) // someone is logged in; basically same as 0\n        {\n          // draws keys\n          for (let j = 0; j < keyArray.length; j++) {\n            keyArray[j].drawKey();\n          }\n\n          p5.drawMapButton();\n          p5.drawRecordButton();\n        } else if (state === 2) // changing keystrokes\n        {\n          // draws keys\n          for (let k = 0; k < keyArray.length; k++) {\n            keyArray[k].drawKey();\n          }\n\n          p5.drawPlayButton();\n        } else if (state === 3) // recording\n        {\n          // draws keys\n          for (let l = 0; l < keyArray.length; l++) {\n            keyArray[l].drawKey();\n          }\n\n          p5.drawEndRecordingButton();\n        }\n    }; // end draw()\n\n    /* BUTTON SECTION */\n\n\n    let buttonX = 300;\n    let buttonY = 100;\n    let buttonWidth = 180;\n    let buttonHeight = 30;\n    /**\n    Draws button to display for user to change to map mode\n    */\n\n    p5.drawMapButton = () => {\n      p5.fill(0);\n      p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p5.fill(255);\n      p5.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n    };\n    /**\n    Draws button to display for user to change to regular mode\n    */\n\n\n    p5.drawPlayButton = () => {\n      p5.fill(255);\n      p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p5.fill(0);\n      p5.text('Click here to play piano', buttonX + 25, buttonY + 20);\n    };\n    /* RECORDING BUTTON SECTION */\n\n\n    let rbuttonX = 300;\n    let rbuttonY = 50;\n    let rbuttonWidth = 100;\n    let rbuttonHeight = 30;\n    /**\n    Draws button to display for user to change to map mode\n    */\n\n    p5.drawRecordButton = () => {\n      p5.fill(0);\n      p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p5.fill(255);\n      p5.text('Record', rbuttonX + 30, rbuttonY + 20);\n    };\n    /**\n    Draws button to display for user to change to regular mode\n    */\n\n\n    p5.drawEndRecordingButton = () => {\n      p5.fill(255);\n      p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p5.fill(0);\n      p5.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n    };\n    /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n\n    let currentSelectedKey = null;\n    let textX = 30;\n    let textY = 200;\n    /**\n    Function is called when a keyboard key is pressed\n    */\n\n    p5.keyPressed = () => {\n      p5.redraw();\n      p5.fill(0);\n\n      if (state === 0 || state === 1 || state === 3) {\n        p5.text(`Key pressed: ${p5.key}`, textX, textY); // \n        // loop through ALL of list to find corresponding key(s) & then play the audio\n        //\n\n        for (let m = 0; m < keyArray.length; m++) {\n          if (keyArray[m].getKeyboardKey() === p5.key) {\n            keyArray[m].drawPressedKey();\n          }\n        }\n      } else if (state === 2) {\n        // change the keymapping and notify user\n        // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n        if (currentSelectedKey != null) {\n          let sameKeyIndex = 0;\n\n          while (sameKeyIndex < keyArray.length) {\n            if (keyArray[sameKeyIndex] === currentSelectedKey) {\n              break;\n            }\n\n            sameKeyIndex += 1;\n          }\n\n          keyArray[sameKeyIndex].changeKeyboardKey();\n          currentUser.updateKeyMappings(keyArray);\n          currentSelectedKey = null;\n        }\n      }\n\n      if (state === 3) {\n        // recording\n        let selectedKey;\n\n        for (let n = 0; n < keyArray.length; n++) {\n          if (keyArray[n].getKeyboardKey() === p5.key) {\n            selectedKey = keyArray[n];\n            recording[p5.millis() - startTime] = selectedKey;\n          }\n        }\n      }\n    }; // end keyPressed()\n\n\n    p5.keyReleased = () => {\n      p5.redraw();\n    };\n    /**\n    Function is called when mouse left button is pressed\n    */\n\n\n    p5.mouseClicked = () => {\n      // state button is pressed\n      if (p5.mouseX > buttonX && p5.mouseX < buttonX + buttonWidth && p5.mouseY > buttonY && p5.mouseY < buttonY + buttonHeight) {\n        if (state === 2) {\n          state = 1;\n          p5.redraw();\n        } else if (state === 0 || state === 1) {\n          state = 2;\n          p5.redraw();\n        }\n      } else if (state === 2) {\n        // see if user if selecting a key to remap\n        currentSelectedKey = p5.selectKeyToRemap();\n      }\n\n      if (p5.mouseX > rbuttonX && p5.mouseX < rbuttonX + rbuttonWidth && p5.mouseY > rbuttonY && p5.mouseY < rbuttonY + rbuttonHeight) {\n        if (state === 0 || state === 1) {\n          // starting recording\n          state = 3;\n          recording = {};\n          startTime = p5.millis();\n        } else if (state === 3) {\n          // ending recording\n          state = 1;\n          currentUser.addRecording();\n        }\n\n        p5.redraw();\n      }\n    }; // end mouseClicked()\n\n    /**\n    Finds which piano key is clicked on and returns it\n    */\n\n\n    p5.selectKeyToRemap = () => {\n      p5.redraw();\n      let whiteKeys = [];\n      let selectedBlackKey = false;\n      let selectedKey = null; // iterate through black keys first because they're visually \"on top\"\n\n      let findKeyIndex = 0;\n\n      while (findKeyIndex < keyArray.length) {\n        if (keyArray[findKeyIndex].constructor.name === \"BlackKey\") {\n          if (keyArray[findKeyIndex].contains(p5.mouseX, p5.mouseY)) {\n            selectedKey = keyArray[findKeyIndex];\n            findKeyIndex = keyArray.length;\n            selectedBlackKey = true;\n          }\n        } else {\n          whiteKeys.push(keyArray[findKeyIndex]);\n        }\n\n        findKeyIndex += 1;\n      } // if black key wasn't selected, then iterate through white keys\n\n\n      if (!selectedBlackKey) {\n        findKeyIndex = 0;\n\n        while (findKeyIndex < whiteKeys.length) {\n          if (whiteKeys[findKeyIndex].contains(p5.mouseX, p5.mouseY)) {\n            selectedKey = whiteKeys[findKeyIndex];\n            findKeyIndex = whiteKeys.length;\n          }\n\n          findKeyIndex += 1;\n        }\n      }\n\n      p5.fill(0);\n\n      if (selectedKey == null) {\n        p5.text(\"Please press on a piano key! :)\", textX, textY);\n      } else {\n        p5.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n      }\n\n      return selectedKey;\n    }; // end of main functions\n\n    /**\n    Abstract class to hold Piano Key note name, sound file, and top-left Y position\n    (tbh not sure if abstract is the correct term, but don't initialize this)\n    */\n\n\n    class PianoKey {\n      constructor(note, keyboardKey, sound) {\n        this.note = note;\n        this.keyboardKey = keyboardKey; // this.sound = p5.loadSound(sound);\n\n        this.startY = 20;\n      }\n\n      play() {// this.sound.play();\n      }\n\n      contains(x, y) {\n        if (x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) {\n          return true;\n        }\n\n        return false;\n      }\n\n      changeKeyboardKey() {\n        this.keyboardKey = p5.key;\n        p5.redraw();\n        p5.text(`New key = ${p5.key} for ${this.note}`, textX, textY);\n      }\n\n      getNote() {\n        return this.note;\n      }\n\n      getKeyboardKey() {\n        return this.keyboardKey;\n      }\n\n    }\n    /**\n    White piano key class\n    */\n\n\n    class WhiteKey extends PianoKey {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 30;\n        this.height = 140;\n        this.drawWhiteKey();\n      }\n\n      drawKey() {\n        this.drawWhiteKey();\n      } // 75 because that's the height of a black key\n\n\n      drawPressedKey() {\n        p5.strokeWeight(0);\n        p5.fill(200);\n        p5.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n        p5.strokeWeight(1);\n        p5.fill(0);\n        p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawWhiteKey() {\n        p5.noFill();\n        p5.rect(this.startX, this.startY, this.width, this.height);\n        p5.fill(0);\n        p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      }\n\n    } // end WhiteKey\n\n    /**\n    Black piano key class\n    */\n\n\n    class BlackKey extends PianoKey {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 20;\n        this.height = 75;\n        this.drawBlackKey();\n      }\n\n      drawKey() {\n        this.drawBlackKey();\n      }\n\n      drawPressedKey() {\n        p5.fill(100);\n        p5.rect(this.startX + 1, this.startY, this.width - 2, this.height - 1);\n        p5.fill(255);\n        p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawBlackKey() {\n        p5.fill(0);\n        p5.rect(this.startX, this.startY, this.width, this.height);\n        p5.fill(255);\n        p5.text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n      }\n\n    } // end BlackKey\n\n    /**\n    Class to represent a user & their keyboard mappings\n    */\n\n\n    class User {\n      // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n      constructor(keys) {\n        this.allKeys = keys; // format for recordings [{},{}]\n        // recording = {timeInMillisec, PianoKey}\n\n        this.recordings = [];\n      }\n\n      updateKeyMappings(keys) {\n        this.allKeys = keys;\n      } // this resets the keyArray accessible throughout the entire file to the default mapping as well\n\n\n      revertToDefaultMapping() {\n        let addKeyIndex = 0;\n\n        for (let note in defaultKeyMapping) {\n          if (defaultKeyMapping[note][0] === \"white\") {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          } else {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n\n          addKeyIndex += 1;\n        }\n\n        this.allKeys = keyArray;\n      }\n\n      getKeyMappings() {\n        return this.allKeys;\n      }\n\n      addRecording() {\n        this.recordings.push(recording);\n        console.log('added recording'); // var intx = 30;\n        // var inty = 200;\n\n        p5.fill(0);\n\n        for (let time in recording) {\n          console.log(`${time} --> ${recording[time].getNote()}`); // p5.text(`${time} --> ${recording[time].getNote()}`, intx, inty);\n          // inty += 10;\n        }\n      }\n\n      getRecordings() {\n        return this.recordings;\n      }\n\n    } // end User\n\n  }; // end Sketch\n\n\n  useEffect(() => {\n    new p5(Sketch); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}; // end PianoSketch\n\n\n_s(PianoSketch, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PianoSketch;\nexport default PianoSketch;\n\nvar _c;\n\n$RefreshReg$(_c, \"PianoSketch\");","map":{"version":3,"sources":["/home/isaaccmcd/Desktop/peeano-myCurrent/peeano/peeano-frontend/src/components/sketches/sketch.js"],"names":["React","useEffect","p5","PianoSketch","Sketch","canvas","state","currentUser","keyArray","recording","startTime","soundFiles","defaultKeyMapping","setup","noLoop","strokeWeight","addKeyIndex","note","WhiteKey","BlackKey","User","setState","stateNum","draw","fill","createCanvas","parent","position","windowHeight","i","length","drawKey","drawMapButton","drawRecordButton","j","k","drawPlayButton","l","drawEndRecordingButton","buttonX","buttonY","buttonWidth","buttonHeight","rect","text","rbuttonX","rbuttonY","rbuttonWidth","rbuttonHeight","currentSelectedKey","textX","textY","keyPressed","redraw","key","m","getKeyboardKey","drawPressedKey","sameKeyIndex","changeKeyboardKey","updateKeyMappings","selectedKey","n","millis","keyReleased","mouseClicked","mouseX","mouseY","selectKeyToRemap","addRecording","whiteKeys","selectedBlackKey","findKeyIndex","constructor","name","contains","push","getNote","PianoKey","keyboardKey","sound","startY","play","x","y","startX","width","height","drawWhiteKey","noFill","drawBlackKey","keys","allKeys","recordings","revertToDefaultMapping","getKeyMappings","console","log","time","getRecordings"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import 'p5/lib/addons/p5.sound';\n\n\nimport React, { useEffect } from \"react\";\nimport * as p5 from \"p5\";\n \nconst PianoSketch = () => {\n\n  const Sketch = p5 => {\n\n    let canvas;\n    let state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n    let currentUser;\n    let keyArray = [];\n\n    let recording = {};\n    let startTime = 0;\n\n    let soundFiles = [\n      \"https://nguyenshana.github.io/piano-sounds/c1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/e1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/b1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"\n    ]\n\n    let defaultKeyMapping = {\n      \"c1\" : [\"white\", \"a\", soundFiles[0], 20],\n      \"c1#\" : [\"black\", \"s\", soundFiles[1], 40],\n      \"d1\" : [\"white\", \"d\", soundFiles[2], 50],\n      \"d1#\" : [\"black\", \"e\", soundFiles[3], 70],\n      \"e1\" : [\"white\", \"f\", soundFiles[4], 80],\n\n      \"f1\" : [\"white\", \"g\", soundFiles[5], 110],\n      \"f1#\" : [\"black\", \"h\", soundFiles[6], 130],\n      \"g1\" : [\"white\", \"j\", soundFiles[7], 140],\n      \"g1#\" : [\"black\", \"u\", soundFiles[8], 160],\n      \"a1\" : [\"white\", \"k\", soundFiles[9], 170],\n      \"a1#\" :[\"black\", \"i\", soundFiles[10], 190],\n      \"c2\" : [\"white\", \"l\", soundFiles[11], 200]\n    }\n\n    // end main variables\n\n\n\n    p5.setup = () => \n    {    \n\n      p5.noLoop();\n      p5.strokeWeight(4);\n\n      if(state === 0) {\n        let addKeyIndex = 0;\n        for(let note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n\n        currentUser = new User(keyArray);\n      }\n\n    }\n\n\n    // not sure if this can a ctually be called from React\n    p5.setState = (stateNum) =>\n    {\n      state = stateNum;\n    }\n\n\n    // currently drawing keys in order from left to right\n    p5.draw = () =>\n    {\n      p5.fill(0);\n      //canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n      canvas = p5.createCanvas(500, 500);\n      canvas.parent('pianoPage');\n      //canvas.position(550,345);\n      canvas.position(550, p5.windowHeight/3, 'relative');\n\n      if(state === 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n\n        // draws keys\n        for(let i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        p5.drawMapButton();\n\n        p5.drawRecordButton();\n\n      } \n      else if (state === 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for(let j = 0; j < keyArray.length; j++) \n        {\n          keyArray[j].drawKey();\n        }\n        p5.drawMapButton();\n\n        p5.drawRecordButton();\n\n      }\n      else if (state === 2) // changing keystrokes\n      {\n        // draws keys\n        for(let k = 0; k < keyArray.length; k++) \n        {\n          keyArray[k].drawKey();\n        }\n        p5.drawPlayButton();\n\n      }\n      else if (state === 3) // recording\n      {\n        // draws keys\n        for(let l = 0; l < keyArray.length; l++) \n        {\n          keyArray[l].drawKey();\n        }\n\n        p5.drawEndRecordingButton();\n\n      }\n\n    } // end draw()\n\n\n\n\n    /* BUTTON SECTION */\n\n    let buttonX = 300;\n    let buttonY = 100;\n    let buttonWidth = 180;\n    let buttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p5.drawMapButton = () => {\n      p5.fill(0);\n      p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p5.fill(255);\n      p5.text('Click here to change mappings', buttonX + 7, buttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p5.drawPlayButton = () => {\n      p5.fill(255);\n      p5.rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      p5.fill(0);\n      p5.text('Click here to play piano', buttonX + 25, buttonY + 20);\n    }\n\n\n    /* RECORDING BUTTON SECTION */\n\n    let rbuttonX = 300;\n    let rbuttonY = 50;\n    let rbuttonWidth = 100;\n    let rbuttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p5.drawRecordButton = () => {\n      p5.fill(0);\n      p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p5.fill(255);\n      p5.text('Record', rbuttonX + 30, rbuttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p5.drawEndRecordingButton = () => {\n      p5.fill(255);\n      p5.rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      p5.fill(0);\n      p5.text('End Recording', rbuttonX + 10, rbuttonY + 20);\n    }\n\n\n\n    /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n    let currentSelectedKey = null;\n    let textX = 30;\n    let textY = 200;\n\n    /**\n    Function is called when a keyboard key is pressed\n    */\n    p5.keyPressed = () =>\n    {\n      p5.redraw();\n      p5.fill(0);\n      if(state === 0 || state === 1 || state === 3) {\n        p5.text(`Key pressed: ${p5.key}`, textX, textY);\n        // \n        // loop through ALL of list to find corresponding key(s) & then play the audio\n        //\n        for(let m = 0; m < keyArray.length; m++) {\n          if(keyArray[m].getKeyboardKey() === p5.key) {\n            keyArray[m].drawPressedKey();\n          }\n        }\n      }\n      else if (state === 2) { // change the keymapping and notify user\n        // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n\n        if(currentSelectedKey != null) \n        {\n          let sameKeyIndex = 0;\n          while(sameKeyIndex < keyArray.length) \n          {\n            if(keyArray[sameKeyIndex] === currentSelectedKey) \n            {\n              break;\n            }\n            sameKeyIndex += 1;\n          }\n          keyArray[sameKeyIndex].changeKeyboardKey();\n          currentUser.updateKeyMappings(keyArray);\n          currentSelectedKey = null;\n        }\n      }\n      if (state === 3) { // recording\n        let selectedKey;\n        for(let n = 0; n < keyArray.length; n++) {\n          if(keyArray[n].getKeyboardKey() === p5.key) {\n            selectedKey = keyArray[n];\n            recording[p5.millis() - startTime] = selectedKey;\n          }\n        }\n      }\n\n    } // end keyPressed()\n\n\n    p5.keyReleased = () => {\n      p5.redraw();\n    }\n\n\n    /**\n    Function is called when mouse left button is pressed\n    */\n    p5.mouseClicked = () =>\n    {\n      // state button is pressed\n      if(p5.mouseX > buttonX && p5.mouseX < buttonX + buttonWidth && p5.mouseY > buttonY && p5.mouseY < buttonY + buttonHeight) \n      {\n        if(state === 2) \n        {\n          state = 1;\n          p5.redraw();\n        }\n        else if (state === 0 || state === 1) \n        {\n          state = 2;\n          p5.redraw();\n        } \n      } \n      else if(state === 2) \n      { // see if user if selecting a key to remap\n        currentSelectedKey = p5.selectKeyToRemap();\n      }\n      if(p5.mouseX > rbuttonX && p5.mouseX < rbuttonX + rbuttonWidth && p5.mouseY > rbuttonY && p5.mouseY < rbuttonY + rbuttonHeight) \n      {\n        if(state === 0 || state === 1) \n        { // starting recording\n          state = 3;\n          recording = {};\n          startTime = p5.millis();\n        }\n        else if(state === 3) \n        { // ending recording\n          state = 1;\n          currentUser.addRecording();\n        }\n        p5.redraw();\n      }\n\n    } // end mouseClicked()\n\n\n    /**\n    Finds which piano key is clicked on and returns it\n    */\n    p5.selectKeyToRemap = () => {\n\n      p5.redraw();\n      let whiteKeys = [];\n      let selectedBlackKey = false;\n      let selectedKey = null;\n\n      // iterate through black keys first because they're visually \"on top\"\n      let findKeyIndex = 0;\n      while(findKeyIndex < keyArray.length) \n      {\n        if(keyArray[findKeyIndex].constructor.name === \"BlackKey\") \n        {\n          if(keyArray[findKeyIndex].contains(p5.mouseX, p5.mouseY)) \n          {\n            selectedKey = keyArray[findKeyIndex];\n            findKeyIndex = keyArray.length;\n            selectedBlackKey = true;\n          }\n        }\n        else \n        {\n          whiteKeys.push(keyArray[findKeyIndex]);\n        }\n        findKeyIndex += 1;\n      }\n      // if black key wasn't selected, then iterate through white keys\n      if(!selectedBlackKey) \n      {\n        findKeyIndex = 0;\n        while(findKeyIndex < whiteKeys.length) \n        {\n          if(whiteKeys[findKeyIndex].contains(p5.mouseX, p5.mouseY)) \n          {\n            selectedKey = whiteKeys[findKeyIndex];\n            findKeyIndex = whiteKeys.length;\n          }\n\n          findKeyIndex += 1;\n        }\n      }\n\n      p5.fill(0);\n      if(selectedKey == null) {\n        p5.text(\"Please press on a piano key! :)\", textX, textY);\n      } else {\n        p5.text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n      }\n\n      return selectedKey;\n\n    }\n\n    // end of main functions\n\n\n\n    /**\n    Abstract class to hold Piano Key note name, sound file, and top-left Y position\n    (tbh not sure if abstract is the correct term, but don't initialize this)\n    */\n    class PianoKey \n    {\n      constructor(note, keyboardKey, sound) \n      {\n        this.note = note;\n        this.keyboardKey = keyboardKey;\n        // this.sound = p5.loadSound(sound);\n        this.startY = 20;\n      }\n\n      play() {\n        // this.sound.play();\n      }\n\n      contains(x, y) \n      {\n        if(x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) \n        {\n          return true;\n        }\n        return false;\n      }\n\n      changeKeyboardKey() {\n        this.keyboardKey = p5.key;\n        p5.redraw();\n        p5.text(`New key = ${p5.key} for ${this.note}`, textX, textY);\n      }\n\n      getNote() {\n        return this.note;\n      }\n\n      getKeyboardKey() {\n        return this.keyboardKey;\n      }\n\n    }\n\n\n    /**\n    White piano key class\n    */\n    class WhiteKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 30;\n        this.height = 140;\n        this.drawWhiteKey();\n      }\n\n      drawKey() {\n        this.drawWhiteKey();\n      }\n\n      // 75 because that's the height of a black key\n      drawPressedKey() {\n        p5.strokeWeight(0);\n        p5.fill(200)\n        p5.rect(this.startX, this.startY + 75, this.width, this.height - 75);\n        p5.strokeWeight(1);\n        p5.fill(0);\n        p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawWhiteKey() {\n        p5.noFill();\n        p5.rect(this.startX, this.startY, this.width, this.height);\n        p5.fill(0);\n        p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n\n    } // end WhiteKey\n\n\n\n    /**\n    Black piano key class\n    */\n    class BlackKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 20;\n        this.height = 75;\n        this.drawBlackKey();\n      }\n\n      drawKey() {\n        this.drawBlackKey();\n      }\n\n      drawPressedKey() {\n        p5.fill(100);\n        p5.rect(this.startX + 1, this.startY, this.width - 2, this.height - 1);\n        p5.fill(255);\n        p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play()\n      }\n\n      drawBlackKey() {\n        p5.fill(0);\n        p5.rect(this.startX, this.startY, this.width, this.height);\n        p5.fill(255);\n        p5.text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n    } // end BlackKey\n\n\n\n    /**\n    Class to represent a user & their keyboard mappings\n    */\n    class User \n    {\n      // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n      constructor(keys) {\n        this.allKeys = keys;\n        // format for recordings [{},{}]\n        // recording = {timeInMillisec, PianoKey}\n        this.recordings = [];\n      }\n\n      updateKeyMappings(keys) {\n        this.allKeys = keys;\n      } \n\n      // this resets the keyArray accessible throughout the entire file to the default mapping as well\n      revertToDefaultMapping() \n      {\n        let addKeyIndex = 0;\n        for(let note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n        this.allKeys = keyArray\n      }\n\n      getKeyMappings() {\n        return this.allKeys;\n      }\n\n      addRecording() {\n        this.recordings.push(recording);\n        console.log('added recording');\n        // var intx = 30;\n        // var inty = 200;\n        p5.fill(0);\n        for(let time in recording) {\n         console.log(`${time} --> ${recording[time].getNote()}`);\n         // p5.text(`${time} --> ${recording[time].getNote()}`, intx, inty);\n         // inty += 10;\n        }\n      }\n\n      getRecordings() {\n        return this.recordings;\n      }\n\n    } // end User\n\n  } // end Sketch\n\n  useEffect(() => {\n    new p5(Sketch);\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n   \n   return (\n      <></>\n   );\n\n} // end PianoSketch\n\nexport default PianoSketch;\n"]},"metadata":{},"sourceType":"module"}