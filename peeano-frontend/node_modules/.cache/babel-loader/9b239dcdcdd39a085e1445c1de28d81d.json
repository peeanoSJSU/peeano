{"ast":null,"code":"var _jsxFileName = \"/Users/shana/Desktop/DesktopItems/CMPE 133/peeano/peeano-frontend/src/AppP5.js\";\nimport React from 'react';\n\nclass AppP5 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.Sketch = p => {\n      var canvas;\n      var state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n\n      var currentUser;\n      var keyArray = [];\n      var recording = {};\n      var startTime = 0;\n      var soundFiles = [\"https://nguyenshana.github.io/piano-sounds/c1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1.m4a\", \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/e1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1.m4a\", \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1.m4a\", \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1.m4a\", \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\", \"https://nguyenshana.github.io/piano-sounds/b1.m4a\", \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"];\n      var defaultKeyMapping = {\n        \"c1\": [\"white\", \"a\", soundFiles[0], 20],\n        \"c1#\": [\"black\", \"s\", soundFiles[1], 40],\n        \"d1\": [\"white\", \"d\", soundFiles[2], 50],\n        \"d1#\": [\"black\", \"e\", soundFiles[3], 70],\n        \"e1\": [\"white\", \"f\", soundFiles[4], 80],\n        \"f1\": [\"white\", \"g\", soundFiles[5], 110],\n        \"f1#\": [\"black\", \"h\", soundFiles[6], 130],\n        \"g1\": [\"white\", \"j\", soundFiles[7], 140],\n        \"g1#\": [\"black\", \"u\", soundFiles[8], 160],\n        \"a1\": [\"white\", \"k\", soundFiles[9], 170],\n        \"a1#\": [\"black\", \"i\", soundFiles[10], 190],\n        \"c2\": [\"white\", \"l\", soundFiles[11], 200]\n      }; // end main variables\n\n      p.setup = () => {\n        noLoop();\n        strokeWeight(4);\n\n        if (state == 0) {\n          var addKeyIndex = 0;\n\n          for (var note in defaultKeyMapping) {\n            if (defaultKeyMapping[note][0] === \"white\") {\n              keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n            } else {\n              keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n            }\n\n            addKeyIndex += 1;\n          }\n\n          currentUser = new User(keyArray);\n        }\n      }; // not sure if this can a ctually be called from React\n\n\n      p.setState = stateNum => {\n        state = stateNum;\n      }; // currently drawing keys in order from left to right\n\n\n      p.draw = () => {\n        fill(0);\n        canvas = createCanvas(windowWidth, windowHeight);\n\n        if (state == 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n          {\n            // draws keys\n            for (var i = 0; i < keyArray.length; i++) {\n              keyArray[i].drawKey();\n            }\n\n            drawMapButton();\n            drawRecordButton();\n            print(\"state = 0\");\n          } else if (state == 1) // someone is logged in; basically same as 0\n          {\n            // draws keys\n            for (var i = 0; i < keyArray.length; i++) {\n              keyArray[i].drawKey();\n            }\n\n            drawMapButton();\n            drawRecordButton();\n            print(\"state = 1 :)\");\n          } else if (state == 2) // changing keystrokes\n          {\n            // draws keys\n            for (var i = 0; i < keyArray.length; i++) {\n              keyArray[i].drawKey();\n            }\n\n            drawPlayButton();\n            print(\"state = 2 :))\");\n          } else if (state == 3) // recording\n          {\n            // draws keys\n            for (var i = 0; i < keyArray.length; i++) {\n              keyArray[i].drawKey();\n            }\n\n            drawEndRecordingButton();\n            print(\"state = 3\");\n          }\n      }; // end draw()\n\n      /* BUTTON SECTION */\n\n\n      var buttonX = 300;\n      var buttonY = 100;\n      var buttonWidth = 180;\n      var buttonHeight = 30;\n      /**\n      Draws button to display for user to change to map mode\n      */\n\n      p.drawMapButton = () => {\n        fill(0);\n        rect(buttonX, buttonY, buttonWidth, buttonHeight);\n        fill(255);\n        text('Click here to change mappings', buttonX + 7, buttonY + 20);\n      };\n      /**\n      Draws button to display for user to change to regular mode\n      */\n\n\n      p.drawPlayButton = () => {\n        fill(255);\n        rect(buttonX, buttonY, buttonWidth, buttonHeight);\n        fill(0);\n        text('Click here to play piano', buttonX + 25, buttonY + 20);\n      };\n      /* RECORDING BUTTON SECTION */\n\n\n      var rbuttonX = 300;\n      var rbuttonY = 50;\n      var rbuttonWidth = 100;\n      var rbuttonHeight = 30;\n      /**\n      Draws button to display for user to change to map mode\n      */\n\n      p.drawRecordButton = () => {\n        fill(0);\n        rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n        fill(255);\n        text('Record', rbuttonX + 30, rbuttonY + 20);\n      };\n      /**\n      Draws button to display for user to change to regular mode\n      */\n\n\n      p.drawEndRecordingButton = () => {\n        fill(255);\n        rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n        fill(0);\n        text('End Recording', rbuttonX + 10, rbuttonY + 20);\n      };\n      /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n\n      var currentSelectedKey = null;\n      var textX = 30;\n      var textY = 200;\n      /**\n      Function is called when a keyboard key is pressed\n      */\n\n      p.keyPressed = () => {\n        redraw();\n        fill(0);\n\n        if (state == 0 || state == 1 || state == 3) {\n          text(`Key pressed: ${key}`, textX, textY); // \n          // loop through ALL of list to find corresponding key(s) & then play the audio\n          //\n\n          for (var i = 0; i < keyArray.length; i++) {\n            if (keyArray[i].getKeyboardKey() == key) {\n              keyArray[i].drawPressedKey();\n            }\n          }\n        } else if (state == 2) {\n          // change the keymapping and notify user\n          // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n          if (currentSelectedKey != null) {\n            var sameKeyIndex = 0;\n\n            while (sameKeyIndex < keyArray.length) {\n              if (keyArray[sameKeyIndex] === currentSelectedKey) {\n                break;\n              }\n\n              sameKeyIndex += 1;\n            }\n\n            keyArray[sameKeyIndex].changeKeyboardKey();\n            currentUser.updateKeyMappings(keyArray);\n            currentSelectedKey = null;\n          }\n        }\n\n        if (state == 3) {\n          // recording\n          var selectedKey;\n\n          for (var i = 0; i < keyArray.length; i++) {\n            if (keyArray[i].getKeyboardKey() == key) {\n              selectedKey = keyArray[i];\n              recording[millis() - startTime] = selectedKey;\n            }\n          }\n        }\n      }; // end keyPressed()\n\n\n      p.keyReleased = () => {\n        redraw();\n      };\n      /**\n      Function is called when mouse left button is pressed\n      */\n\n\n      p.mouseClicked = () => {\n        // state button is pressed\n        if (mouseX > buttonX && mouseX < buttonX + buttonWidth && mouseY > buttonY && mouseY < buttonY + buttonHeight) {\n          if (state == 2) {\n            state = 1;\n            redraw();\n          } else if (state == 0 || state == 1) {\n            state = 2;\n            redraw();\n          }\n        } else if (state == 2) {\n          // see if user if selecting a key to remap\n          currentSelectedKey = selectKeyToRemap();\n        }\n\n        if (mouseX > rbuttonX && mouseX < rbuttonX + rbuttonWidth && mouseY > rbuttonY && mouseY < rbuttonY + rbuttonHeight) {\n          if (state == 0 || state == 1) {\n            // starting recording\n            state = 3;\n            recording = {};\n            startTime = millis();\n          } else if (state == 3) {\n            // ending recording\n            state = 1;\n            currentUser.addRecording();\n          }\n\n          redraw();\n        }\n      }; // end mouseClicked()\n\n      /**\n      Finds which piano key is clicked on and returns it\n      */\n\n\n      p.selectKeyToRemap = () => {\n        redraw();\n        var whiteKeys = [];\n        var selectedBlackKey = false;\n        var selectedKey = null; // iterate through black keys first because they're visually \"on top\"\n\n        var findKeyIndex = 0;\n\n        while (findKeyIndex < keyArray.length) {\n          if (keyArray[findKeyIndex].constructor.name == \"BlackKey\") {\n            if (keyArray[findKeyIndex].contains(mouseX, mouseY)) {\n              selectedKey = keyArray[findKeyIndex];\n              findKeyIndex = keyArray.length;\n              selectedBlackKey = true;\n            }\n          } else {\n            whiteKeys.push(keyArray[findKeyIndex]);\n          }\n\n          findKeyIndex += 1;\n        } // if black key wasn't selected, then iterate through white keys\n\n\n        if (!selectedBlackKey) {\n          findKeyIndex = 0;\n\n          while (findKeyIndex < whiteKeys.length) {\n            if (whiteKeys[findKeyIndex].contains(mouseX, mouseY)) {\n              selectedKey = whiteKeys[findKeyIndex];\n              findKeyIndex = whiteKeys.length;\n            }\n\n            findKeyIndex += 1;\n          }\n        }\n\n        fill(0);\n\n        if (selectedKey == null) {\n          text(\"Please press on a piano key! :)\", textX, textY);\n        } else {\n          text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n        }\n\n        return selectedKey;\n      }; // end of main functions\n\n      /**\n      Abstract class to hold Piano Key note name, sound file, and top-left Y position\n      (tbh not sure if abstract is the correct term, but don't initialize this)\n      */\n\n\n      class PianoKey {\n        constructor(note, keyboardKey, sound) {\n          this.note = note;\n          this.keyboardKey = keyboardKey;\n          this.sound = loadSound(sound);\n          this.startY = 20;\n        }\n\n        play() {\n          print(`${this.note} is played with keyboard key ${this.keyboardKey}`);\n          this.sound.play();\n        }\n\n        contains(x, y) {\n          if (x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) {\n            print(`${this.note} is clicked on`);\n            return true;\n          }\n\n          return false;\n        }\n\n        changeKeyboardKey() {\n          this.keyboardKey = key;\n          redraw();\n          text(`New key = ${key} for ${this.note}`, textX, textY);\n        }\n\n        getNote() {\n          return this.note;\n        }\n\n        getKeyboardKey() {\n          return this.keyboardKey;\n        }\n\n      }\n      /**\n      White piano key class\n      */\n\n\n      class WhiteKey extends PianoKey {\n        // assume they all start at the same Y position\n        constructor(note, keyboardKey, sound, startX) {\n          super(note, keyboardKey, sound);\n          this.startX = startX;\n          this.width = 30;\n          this.height = 140;\n          this.drawWhiteKey();\n        }\n\n        drawKey() {\n          this.drawWhiteKey();\n        } // 75 because that's the height of a black key\n\n\n        drawPressedKey() {\n          strokeWeight(0);\n          fill(200);\n          rect(this.startX, this.startY + 75, this.width, this.height - 75);\n          strokeWeight(4);\n          fill(0);\n          text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n          super.play();\n        }\n\n        drawWhiteKey() {\n          noFill();\n          rect(this.startX, this.startY, this.width, this.height);\n          fill(0);\n          text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n        }\n\n      } // end WhiteKey\n\n      /**\n      Black piano key class\n      */\n\n\n      class BlackKey extends PianoKey {\n        // assume they all start at the same Y position\n        constructor(note, keyboardKey, sound, startX) {\n          super(note, keyboardKey, sound);\n          this.startX = startX;\n          this.width = 20;\n          this.height = 75;\n          this.drawBlackKey();\n        }\n\n        drawKey() {\n          this.drawBlackKey();\n        }\n\n        drawPressedKey() {\n          fill(100);\n          rect(this.startX, this.startY, this.width, this.height);\n          fill(255);\n          text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n          super.play();\n        }\n\n        drawBlackKey() {\n          fill(0);\n          rect(this.startX, this.startY, this.width, this.height);\n          fill(255);\n          text(this.keyboardKey, this.startX + this.width / 2, this.startY + this.height - 5);\n        }\n\n      } // end BlackKey\n\n      /**\n      Class to represent a user & their keyboard mappings\n      */\n\n\n      class User {\n        // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n        constructor(keys) {\n          this.allKeys = keys; // format for recordings [{},{}]\n          // recording = {timeInMillisec, PianoKey}\n\n          this.recordings = [];\n        }\n\n        updateKeyMappings(keys) {\n          this.allKeys = keys;\n        } // this resets the keyArray accessible throughout the entire file to the default mapping as well\n\n\n        revertToDefaultMapping() {\n          for (var note in defaultKeyMapping) {\n            if (defaultKeyMapping[note][0] === \"white\") {\n              keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n            } else {\n              keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n            }\n\n            addKeyIndex += 1;\n          }\n\n          this.allKeys = keyArray;\n        }\n\n        getKeyMappings() {\n          return this.allKeys;\n        }\n\n        addRecording() {\n          this.recordings.push(recording); // for(var time in recording) {\n          //  print(time, recording[time].getNote());\n          // }\n        }\n\n        getRecordings() {\n          return this.recordings;\n        }\n\n      } // end User\n\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myP5 = new p5(this.Sketch, this.myRef.current);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default AppP5;","map":{"version":3,"sources":["/Users/shana/Desktop/DesktopItems/CMPE 133/peeano/peeano-frontend/src/AppP5.js"],"names":["React","AppP5","Component","constructor","props","Sketch","p","canvas","state","currentUser","keyArray","recording","startTime","soundFiles","defaultKeyMapping","setup","noLoop","strokeWeight","addKeyIndex","note","WhiteKey","BlackKey","User","setState","stateNum","draw","fill","createCanvas","windowWidth","windowHeight","i","length","drawKey","drawMapButton","drawRecordButton","print","drawPlayButton","drawEndRecordingButton","buttonX","buttonY","buttonWidth","buttonHeight","rect","text","rbuttonX","rbuttonY","rbuttonWidth","rbuttonHeight","currentSelectedKey","textX","textY","keyPressed","redraw","key","getKeyboardKey","drawPressedKey","sameKeyIndex","changeKeyboardKey","updateKeyMappings","selectedKey","millis","keyReleased","mouseClicked","mouseX","mouseY","selectKeyToRemap","addRecording","whiteKeys","selectedBlackKey","findKeyIndex","name","contains","push","getNote","PianoKey","keyboardKey","sound","loadSound","startY","play","x","y","startX","width","height","drawWhiteKey","noFill","drawBlackKey","keys","allKeys","recordings","revertToDefaultMapping","getKeyMappings","getRecordings","myRef","createRef","componentDidMount","myP5","p5","current","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nclass AppP5 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef()\n  }\n\n  Sketch = (p) => {\n\n    var canvas;\n    var state = 0; // 0 for guest/new user, 1 for logged in person with customized keymaps, 2 for keyboard key reassignment, 3 for recording\n    var currentUser;\n    var keyArray = [];\n\n    var recording = {};\n    var startTime = 0;\n\n    var soundFiles = [\n      \"https://nguyenshana.github.io/piano-sounds/c1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/d1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/e1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/f1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/g1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/a1sharp.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/b1.m4a\",\n      \"https://nguyenshana.github.io/piano-sounds/c2.m4a\"\n    ]\n\n    var defaultKeyMapping = {\n      \"c1\" : [\"white\", \"a\", soundFiles[0], 20],\n      \"c1#\" : [\"black\", \"s\", soundFiles[1], 40],\n      \"d1\" : [\"white\", \"d\", soundFiles[2], 50],\n      \"d1#\" : [\"black\", \"e\", soundFiles[3], 70],\n      \"e1\" : [\"white\", \"f\", soundFiles[4], 80],\n\n      \"f1\" : [\"white\", \"g\", soundFiles[5], 110],\n      \"f1#\" : [\"black\", \"h\", soundFiles[6], 130],\n      \"g1\" : [\"white\", \"j\", soundFiles[7], 140],\n      \"g1#\" : [\"black\", \"u\", soundFiles[8], 160],\n      \"a1\" : [\"white\", \"k\", soundFiles[9], 170],\n      \"a1#\" :[\"black\", \"i\", soundFiles[10], 190],\n      \"c2\" : [\"white\", \"l\", soundFiles[11], 200]\n    }\n\n    // end main variables\n\n\n\n    p.setup = () => \n    {    \n\n      noLoop();\n      strokeWeight(4);\n\n      if(state == 0) {\n        var addKeyIndex = 0;\n        for(var note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n\n        currentUser = new User(keyArray);\n      }\n\n    }\n\n\n    // not sure if this can a ctually be called from React\n    p.setState = (stateNum) =>\n    {\n      state = stateNum;\n    }\n\n\n    // currently drawing keys in order from left to right\n    p.draw = () =>\n    {\n      fill(0);\n      canvas = createCanvas(windowWidth, windowHeight);\n      if(state == 0) // new user or guest (if first time logged in, automatically set their keymapps to default; this needs to be toggled in React)\n      {\n\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawMapButton();\n\n        drawRecordButton();\n\n        print(\"state = 0\");\n\n      } \n      else if (state == 1) // someone is logged in; basically same as 0\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawMapButton();\n\n        drawRecordButton();\n\n        print(\"state = 1 :)\");\n\n      }\n      else if (state == 2) // changing keystrokes\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n        drawPlayButton();\n\n        print(\"state = 2 :))\");\n      }\n      else if (state == 3) // recording\n      {\n        // draws keys\n        for(var i = 0; i < keyArray.length; i++) \n        {\n          keyArray[i].drawKey();\n        }\n\n        drawEndRecordingButton();\n\n        print(\"state = 3\");\n      }\n\n    } // end draw()\n\n\n\n    /* BUTTON SECTION */\n\n    var buttonX = 300;\n    var buttonY = 100;\n    var buttonWidth = 180;\n    var buttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawMapButton = () => {\n      fill(0);\n      rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      fill(255);\n      text('Click here to change mappings', buttonX + 7, buttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawPlayButton = () => {\n      fill(255);\n      rect(buttonX, buttonY, buttonWidth, buttonHeight);\n      fill(0);\n      text('Click here to play piano', buttonX + 25, buttonY + 20);\n    }\n\n\n    /* RECORDING BUTTON SECTION */\n\n    var rbuttonX = 300;\n    var rbuttonY = 50;\n    var rbuttonWidth = 100;\n    var rbuttonHeight = 30;\n\n    /**\n    Draws button to display for user to change to map mode\n    */\n    p.drawRecordButton = () => {\n      fill(0);\n      rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      fill(255);\n      text('Record', rbuttonX + 30, rbuttonY + 20);\n    }\n\n\n    /**\n    Draws button to display for user to change to regular mode\n    */\n    p.drawEndRecordingButton = () => {\n      fill(255);\n      rect(rbuttonX, rbuttonY, rbuttonWidth, rbuttonHeight);\n      fill(0);\n      text('End Recording', rbuttonX + 10, rbuttonY + 20);\n    }\n\n\n\n    /* USER INPUT SECTION (keyboard key press or mouse click) */\n\n    var currentSelectedKey = null;\n    var textX = 30;\n    var textY = 200;\n\n    /**\n    Function is called when a keyboard key is pressed\n    */\n    p.keyPressed = () =>\n    {\n      redraw();\n      fill(0);\n      if(state == 0 || state == 1 || state == 3) {\n        text(`Key pressed: ${key}`, textX, textY);\n        // \n        // loop through ALL of list to find corresponding key(s) & then play the audio\n        //\n        for(var i = 0; i < keyArray.length; i++) {\n          if(keyArray[i].getKeyboardKey() == key) {\n            keyArray[i].drawPressedKey();\n          }\n        }\n      }\n      else if (state == 2) { // change the keymapping and notify user\n        // text(`Key pressed: ${key} (no piano key selected to remap)`, textX, textY);\n\n        if(currentSelectedKey != null) \n        {\n          var sameKeyIndex = 0;\n          while(sameKeyIndex < keyArray.length) \n          {\n            if(keyArray[sameKeyIndex] === currentSelectedKey) \n            {\n              break;\n            }\n            sameKeyIndex += 1;\n          }\n          keyArray[sameKeyIndex].changeKeyboardKey();\n          currentUser.updateKeyMappings(keyArray);\n          currentSelectedKey = null;\n        }\n      }\n      if (state == 3) { // recording\n        var selectedKey;\n        for(var i = 0; i < keyArray.length; i++) {\n          if(keyArray[i].getKeyboardKey() == key) {\n            selectedKey = keyArray[i];\n            recording[millis() - startTime] = selectedKey;\n          }\n        }\n      }\n\n    } // end keyPressed()\n\n\n    p.keyReleased = () => {\n      redraw();\n    }\n\n\n    /**\n    Function is called when mouse left button is pressed\n    */\n    p.mouseClicked = () =>\n    {\n      // state button is pressed\n      if(mouseX > buttonX && mouseX < buttonX + buttonWidth && mouseY > buttonY && mouseY < buttonY + buttonHeight) \n      {\n        if(state == 2) \n        {\n          state = 1;\n          redraw();\n        }\n        else if (state == 0 || state == 1) \n        {\n          state = 2;\n          redraw();\n        } \n      } \n      else if(state == 2) \n      { // see if user if selecting a key to remap\n        currentSelectedKey = selectKeyToRemap();\n      }\n      if(mouseX > rbuttonX && mouseX < rbuttonX + rbuttonWidth && mouseY > rbuttonY && mouseY < rbuttonY + rbuttonHeight) \n      {\n        if(state == 0 || state == 1) \n        { // starting recording\n          state = 3;\n          recording = {};\n          startTime = millis();\n        }\n        else if(state == 3) \n        { // ending recording\n          state = 1;\n          currentUser.addRecording();\n        }\n        redraw();\n      }\n\n    } // end mouseClicked()\n\n\n    /**\n    Finds which piano key is clicked on and returns it\n    */\n    p.selectKeyToRemap = () => {\n\n      redraw();\n      var whiteKeys = [];\n      var selectedBlackKey = false;\n      var selectedKey = null;\n\n      // iterate through black keys first because they're visually \"on top\"\n      var findKeyIndex = 0;\n      while(findKeyIndex < keyArray.length) \n      {\n        if(keyArray[findKeyIndex].constructor.name == \"BlackKey\") \n        {\n          if(keyArray[findKeyIndex].contains(mouseX, mouseY)) \n          {\n            selectedKey = keyArray[findKeyIndex];\n            findKeyIndex = keyArray.length;\n            selectedBlackKey = true;\n          }\n        }\n        else \n        {\n          whiteKeys.push(keyArray[findKeyIndex]);\n        }\n        findKeyIndex += 1;\n      }\n      // if black key wasn't selected, then iterate through white keys\n      if(!selectedBlackKey) \n      {\n        findKeyIndex = 0;\n        while(findKeyIndex < whiteKeys.length) \n        {\n          if(whiteKeys[findKeyIndex].contains(mouseX, mouseY)) \n          {\n            selectedKey = whiteKeys[findKeyIndex];\n            findKeyIndex = whiteKeys.length;\n          }\n\n          findKeyIndex += 1;\n        }\n      }\n\n      fill(0);\n      if(selectedKey == null) {\n        text(\"Please press on a piano key! :)\", textX, textY);\n      } else {\n        text(`Press on new keyboard key to map with ${selectedKey.getNote()}`, textX, textY);\n      }\n\n      return selectedKey;\n\n    }\n\n    // end of main functions\n\n\n\n    /**\n    Abstract class to hold Piano Key note name, sound file, and top-left Y position\n    (tbh not sure if abstract is the correct term, but don't initialize this)\n    */\n    class PianoKey \n    {\n      constructor(note, keyboardKey, sound) \n      {\n        this.note = note;\n        this.keyboardKey = keyboardKey;\n        this.sound = loadSound(sound);\n        this.startY = 20;\n      }\n\n      play() {\n        print(`${this.note} is played with keyboard key ${this.keyboardKey}`);\n        this.sound.play();\n      }\n\n      contains(x, y) \n      {\n        if(x > this.startX && x < this.startX + this.width && y > this.startY && y < this.startY + this.height) \n        {\n          print(`${this.note} is clicked on`);\n          return true;\n        }\n        return false;\n      }\n\n      changeKeyboardKey() {\n        this.keyboardKey = key;\n        redraw();\n        text(`New key = ${key} for ${this.note}`, textX, textY);\n      }\n\n      getNote() {\n        return this.note;\n      }\n\n      getKeyboardKey() {\n        return this.keyboardKey;\n      }\n\n    }\n\n\n    /**\n    White piano key class\n    */\n    class WhiteKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 30;\n        this.height = 140;\n        this.drawWhiteKey();\n      }\n\n      drawKey() {\n        this.drawWhiteKey();\n      }\n\n      // 75 because that's the height of a black key\n      drawPressedKey() {\n        strokeWeight(0);\n        fill(200)\n        rect(this.startX, this.startY + 75, this.width, this.height - 75);\n        strokeWeight(4);\n        fill(0);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play();\n      }\n\n      drawWhiteKey() {\n        noFill();\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(0);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n\n    } // end WhiteKey\n\n\n\n    /**\n    Black piano key class\n    */\n    class BlackKey extends PianoKey\n    {\n      // assume they all start at the same Y position\n      constructor(note, keyboardKey, sound, startX) {\n        super(note, keyboardKey, sound);\n        this.startX = startX;\n        this.width = 20;\n        this.height = 75;\n        this.drawBlackKey();\n      }\n\n      drawKey() {\n        this.drawBlackKey();\n      }\n\n      drawPressedKey() {\n        fill(100);\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(255);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n        super.play()\n      }\n\n      drawBlackKey() {\n        fill(0);\n        rect(this.startX, this.startY, this.width, this.height);\n        fill(255);\n        text(this.keyboardKey, this.startX + this.width/2 , this.startY + this.height - 5);\n      }\n\n    } // end BlackKey\n\n\n\n    /**\n    Class to represent a user & their keyboard mappings\n    */\n    class User \n    {\n      // keys input is an array of PianoKeys, both WhiteKey and BlackKey\n      constructor(keys) {\n        this.allKeys = keys;\n        // format for recordings [{},{}]\n        // recording = {timeInMillisec, PianoKey}\n        this.recordings = [];\n      }\n\n      updateKeyMappings(keys) {\n        this.allKeys = keys;\n      } \n\n      // this resets the keyArray accessible throughout the entire file to the default mapping as well\n      revertToDefaultMapping() \n      {\n        for(var note in defaultKeyMapping) \n        {\n          if(defaultKeyMapping[note][0] === \"white\")\n          {\n            keyArray[addKeyIndex] = new WhiteKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          else \n          {\n            keyArray[addKeyIndex] = new BlackKey(note, defaultKeyMapping[note][1], defaultKeyMapping[note][2], defaultKeyMapping[note][3]);\n          }\n          addKeyIndex += 1;\n        }\n        this.allKeys = keyArray\n      }\n\n      getKeyMappings() {\n        return this.allKeys;\n      }\n\n      addRecording() {\n        this.recordings.push(recording);\n        // for(var time in recording) {\n        //  print(time, recording[time].getNote());\n        // }\n      }\n\n      getRecordings() {\n        return this.recordings;\n      }\n\n    } // end User\n\n\n\n\n  }\n\n  componentDidMount() {\n    this.myP5 = new p5(this.Sketch, this.myRef.current)\n  }\n\n  render() {\n    return (\n      <div ref={this.myRef}>\n\n      </div>\n    )\n  }\n}\n\nexport default AppP5;"]},"metadata":{},"sourceType":"module"}